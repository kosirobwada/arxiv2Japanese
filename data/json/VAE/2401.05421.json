{
    "optim": "WildGEN: Long-horizon Trajectory Generation for Wildlife Ali Al-Lawati aha112@psu.edu Penn State State College, Pennsylvania, USA Elsayed Eshra eme5375@psu.edu Penn State State College, Pennsylvania, USA Prasenjit Mitra pum10@psu.edu Penn State State College, Pennsylvania, USA ABSTRACT Trajectory generation is an important concern in pedestrian, ve- hicle, and wildlife movement studies. Generated trajectories help enrich the training corpus in relation to deep learning applications, and may be used to facilitate simulation tasks. This is especially significant in the wildlife domain, where the cost of obtaining addi- tional real data can be prohibitively expensive, time-consuming, and bear ethical considerations. In this paper, we introduce WildGEN: a conceptual framework that addresses this challenge by employing a Variational Auto-encoders (VAEs) based method for the acquisition of movement characteristics exhibited by wild geese over a long horizon using a sparse set of truth samples. A subsequent post- processing step of the generated trajectories is performed based on smoothing filters to reduce excessive wandering. Our evaluation is conducted through visual inspection and the computation of the Hausdorff distance between the generated and real trajectories. In addition, we utilize the Pearson Correlation Coefficient as a way to measure how realistic the trajectories are based on the similarity of clusters evaluated on the generated and real trajectories. KEYWORDS Trajectory Generation, Wildlife Trajectory, Trajectory Framework ACM Reference Format: Ali Al-Lawati, Elsayed Eshra, and Prasenjit Mitra. 2023. WildGEN: Long- horizon Trajectory Generation for Wildlife. In Proceedings of InfoWild (In- foWild’23). ACM, New York, NY, USA, 9 pages. https://doi.org/XXXXXXX. XXXXXXX 1 INTRODUCTION Animals in the wild move for a variety of reasons, including for- aging, exploration, or migration [19]. A better understanding of the drivers of wildlife movement can have tremendous benefits in environmental planning, preservation efforts, and anti-poaching. It contributes to mitigating conflict between wildlife and human settlements [11]. Scientists in wildlife studies use datasets of animal trajectories collected, typically, using telemetry devices, such as GPS collars, to capture the animals’ exact location over time. However, the limitations of using these devices arise from the complications and dangers associated with attaching the devices to the animals, Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. InfoWild’23, Oct 2023, Birmingham, UK © 2023 Association for Computing Machinery. ACM ISBN 978-1-4503-XXXX-X/18/06...$15.00 https://doi.org/XXXXXXX.XXXXXXX Figure 1: Real (green) vs Generated (blue) Trajectories including constraints on device size and weight depending on the animal, potential failures, and battery life. As a result, considerable work in movement ecology attempts to generate wildlife trajectories based on concepts such as Correlated Random Walk (CRW) [13] and Brownian Motion [5]. However, some of these methods are limited in their effectiveness to land- based animals. Furthermore, in their basic form, these methods can only model the wandering effect of animals within a foraging area [2]. Methods such as Brownian Bridges [18] extend these movement models using a beginning and endpoint, and interpolate the in- between points based on the maximum speed and time budget of the animal over the expected duration of the trajectory. However, these methods fail to take existing measured trajectories as input in the process of trajectory generation. Instead, they rely on random variables to induce movement, and thereby achieve limited success. On the other hand, pedestrian and vehicle trajectory generation problems are constrained by the road and pedestrian networks which are not applicable in the wildlife domain. Likewise, trajectory generation in the UAV literature is irrelevant as it is more concerned with optimization, and minimizing flying time through the target waypoints [17]. In this paper, we present a novel framework we call WildGEN that attempts to generate trajectories by learning the statistical properties of a sparse set of known trajectories. The framework, WildGEN, is based on proven deep learning-based Variational Auto- encoders (VAEs) which have successfully been applied to similar problems [4]. WildGEN applies a post-processing filter on each trajectory path using a Minimum Bounding Region (MBR) based constraint. Furthermore, in order to reduce the excessive wandering effect, a smoothing filter is applied. In the next section, we discuss some related work, followed by a brief motivation of the methods we used to develop our Framework. Section 4 presents the experimental settings, experimental results, and an ablation study that demonstrates the contribution of each arXiv:2401.05421v1  [cs.LG]  30 Dec 2023 InfoWild’23, Oct 2023, Birmingham, UK component to the overall results. We conclude and discuss future work in Section 5. The contributions of this work can be summarized as follows: • We propose a framework that generates realistic long-horizon wildlife trajectories based on a sparse set of real trajectories. • We experimentally test our framework and we validate the empirical results using Hausdorff distance and the Pearson Correlation Coefficient metrics to measure path and cluster similarities, respectively between the real and generated trajectory sets. • We benchmark our method against Levy Walk/Flight [22], which is state-of-the-art in long-horizon trajectory genera- tion in the wildlife domain. We also evaluate our methods over kriging [6], using a Heteroscedastic Gaussian Process Regression (GPR) of multiple trajectories on the same time horizon. Figure 1 visually demonstrates the potential of this approach. We further evaluate our approach using well-established trajectory similarity measures. 1.1 Problem Statement Given a set of 𝑛 real trajectories, each consisting of 𝑚 (𝑥,𝑦) points, the objective is to produce a set of synthetic trajectories that maxi- mize the following: (1) (Path Similarity) How similar are the points of the synthetic trajectories to the real trajectories? (2) (Cluster Similarity) How well do the synthetic trajectories align with the real trajectories in terms of areas of concen- tration? Formally, given 𝑛 real trajectories, denoted as 𝑇1,𝑇2, . . . ,𝑇𝑛 where each 𝑇𝑖 consists of 𝑚 points: 𝑇𝑖 = (𝑝𝑖 1, 𝑝𝑖 2, . . . , 𝑝𝑖 𝑚)} for 1 ≤ 𝑖 ≤ 𝑛, and 𝑝𝑖 𝑗 (𝑗 ∈ {1, 2, . . . ,𝑚}) is a spatio-temporal point consisting of latitude and longitude values. Find a set of: 𝑆1,𝑆2, . . . ,𝑆𝑛 such that we maximize the similarity between the two sets: max Similarity(𝑇,𝑆) where 𝑇 = {𝑇1,𝑇2, . . . ,𝑇𝑛},𝑆 = {𝑆1,𝑆2, . . . ,𝑆𝑛}, and similarity en- compasses Path and Cluster similarity. For the sake of simplicity, we assume the number of synthetic trajectories is equal to the number of real trajectories. We discuss the metrics used in Section 3.5. 2 RELATED WORKS Trajectory generation in the wildlife domain is dominated by mod- els based on Correlated Random Walk (CRW) [3], Brownian motion [5], and Levy Walk/Flight [21]. These methods are based on random steps and turning angles that follow a pre-defined distribution of step length. Trajr is a popular wildlife trajectory R library that pro- vides tools to generate trajectories using each of the aforementioned models [12]. Figure 2: The proposed WildGEN Framework In [18], the authors proposed a CRW trajectory generation method based on the maximum speed and expected direction of movement. However, the approach requires known starting and endpoints and is based on random distributions of velocity and movement angle. Nonetheless, such methods are more effective for simpler concerns such as missing data imputation, i.e. the estimation of missing points between two known points. They are more useful in capturing the micro movement of animals within their home range [14]. On the other hand, the generation of trajectory in the pedes- trian literature is constrained by road, other agents, and physical constraints. In [4], an additional embedding layer is introduced to the VAE Encoder to account for the road network. This ensures the road features are embedded in the learning and understood by the generated trajectories. This has limited applicability in wildlife movement where constraints are terrain-based. On the other hand, a minimum bounding region (MBR) is capable of establishing con- straints on the spatial areas that a trajectory may be allowed to navigate. Generative Adversarial Networks (GANs) are another class of generative algorithms that have been utilized for the trajectory generation problem [20]. However, GANs are well known for their poor convergence properties [23]. In addition, GANs generally require a large sample of training data and are thus ineffective for a sparse sample set [4]. 3 METHODOLOGY Figure 2 depicts the architecture of the proposed WildGEN to gen- erate and post-process a set of real trajectories. The framework is composed of four main components: WildGEN: Long-horizon Trajectory Generation for Wildlife InfoWild’23, Oct 2023, Birmingham, UK • A Variational Auto Encoder (VAE): takes a data set consisting of a training set of n-day long trajectories, each of which represents a single latitude/longitude pair per day for each subject. • A Gaussian Mixture Model (GMM): learns the probability distribution of the training set in the latent space. • A trajectory smoothing filter: utilizes Savitzky-Golay smooth- ing to reduce the excessive wandering effect observed on the generated trajectories. • A Minimum Bounding Region (MBR): analyzes the gener- ated trajectories violation of the constraints on acceptable movement region, and excludes outliers. The framework consists of a training phase where the embed- dings of each trajectory are learned in the latent space. This allows the GMM to learn the distribution of the training set in the latent space, and hence generate new trajectories based on the distribu- tion. The trajectories are decoded using the learned weights from the decoding space. A smoothing post-processing step is utilized on each synthetic trajectory, followed by an MBR step that accepts or rejects it. 3.1 Variational Autoencoders Variational Autoencoders (VAEs) [7] are a class of generative mod- els that have gained significant traction in the field of trajectory generation due to their ability to capture complex data distributions and generate new samples. VAEs consist of two primary compo- nents: the Encoder and the Decoder. 3.1.1 Encoder. The Encoder, denoted as 𝑞(𝑧|𝑇), takes an input trajectory 𝑇 and maps it to a latent space representation 𝑧. The Encoder learns to capture the essential features and patterns present in the trajectory data. It compresses the high-dimensional trajectory space into a lower-dimensional latent space, effectively creating a data-driven embedding of the input trajectory. 3.1.2 Decoder. The Decoder, denoted as 𝑝(𝑇 |𝑧), takes a point 𝑧 from the latent space and generates a trajectory 𝑇 in the original data space. The Decoder’s role is to reconstruct trajectories from the latent space representations, effectively learning the weights that convert latent data back to the original data space. 3.2 Savitzky-Golay Smoothing Trajectory data, often obtained from GPS or motion tracking sys- tems, can be inherently noisy due to measurement errors and en- vironmental factors. Savitzky-Golay smoothing is a valuable tool for enhancing trajectory data quality while preserving essential trajectory characteristics [16]. By applying Savitzky-Golay smoothing to trajectory data, one can effectively reduce the noise present in position (𝑥𝑖) or velocity (𝑣𝑖) measurements. This noise reduction is achieved through a con- volution operation using a set of smoothing coefficients (𝑐𝑗) within a local window: 𝑦𝑖 = 𝑛 ∑︁ 𝑗=−𝑛 𝑐𝑗𝑥𝑖+𝑗 where 𝑦𝑖 represents the smoothed trajectory data at point 𝑖, 𝑥𝑖+𝑗 are the neighboring data points within a window of size 2𝑛 + 1, and 𝑐𝑗 are the coefficients of the polynomial of order 𝑚 that minimize the mean squared error between the smoothed data and the noisy trajectory data. The choice of polynomial order (𝑚) and the window size (2𝑛 + 1) in the context of trajectory data should be carefully considered. Too aggressive smoothing (high 𝑚) may lead to the loss of impor- tant trajectory details, while too little smoothing (low 𝑚) may not adequately mitigate noise. Savitzky-Golay smoothing, when appro- priately tuned, is a valuable mathematical tool for improving the interpretability and reliability of trajectory data. 3.3 Minimum Bounding Region Minimum Bounding Rectangles are the smallest axis-aligned rectan- gles (in two dimensions) or hyperrectangles (in higher dimensions) that enclose a set of trajectory points. In this paper, we generalize them using a convex hull and refer to them as Minimum Bounding Regions (MBR). By encapsulating trajectories within MBRs, we es- tablish constraints on movement, such as maximum and minimum bounds in both spatial dimensions. The advantages of using MBRs lie in their simplicity and ef- ficiency. They provide a compact representation of the potential spatial footprint of trajectory data, making it easier to detect out- liers or unusual behavior. Moreover, MBRs facilitate quick assess- ments of whether trajectories remain within predefined geographi- cal bounds, aiding in the enforcement of constraints in the environ- ment, whether it is regional bounds, rivers, mountain ranges, and other physical constraints. 3.4 Baselines In order to assess the performance of our framework we compare the results obtained to existing methods for animal trajectory gen- eration. As discussed earlier, CRW-based and Brownian motion methods fail at generating long-horizon trajectories for tasks such as migration. Similarly, deep learning methods require large train- ing samples. As such we utilize two baselines that appear to be plausible for the task of long-horizon trajectory generation, namely: • Levy Walk/Flight • Heteroscedastic Multi-variate Gaussian Process Regression (Heteroscedastic GPR) Next, we discuss the details of each of these methods, accordingly. 3.4.1 Levy Walk/Flight. is a stochastic process that models move- ment using a Cauchy distribution to generate trajectory points, which are determined by a combination of step length, variance, and angular standard deviation. These parameters are derived from empirical data or real-world samples and are crucial inputs for the Levy trajectory generation process. The algorithm combines these parameter values of step length, variance, and angular standard deviation with actual data points to produce the Levy trajectory, which is a dynamic and realistic path that captures the distinctive properties of the moving animal. 3.4.2 Heteroscedastic GPR. Heteroscedastic GPR [10] is an exten- sion of traditional Gaussian Process Regression (GPR) that explicitly models and accounts for varying levels of noise in the data. GPR is a powerful and versatile non-parametric method commonly used for InfoWild’23, Oct 2023, Birmingham, UK Real (green) vs Generated (blue) Real (green) vs Generated (blue) Real (green) vs Generated (blue) Figure 3: Three different sets of Generated Trajectories mapped against a background of Real Trajectories modeling complex relationships in data. Traditionally, GPR assumes that the noise in the observed data is homoscedastic, meaning that the variance of the noise is constant across all data points. How- ever, real-world data often exhibits heteroscedasticity, where the variance of the noise varies across the input space or with respect to the magnitude of the predictions. In such cases, traditional GPR may provide suboptimal results, leading to biased predictions and inaccurate uncertainty estimates. Heteroscedastic GPR addresses the issue of varying noise levels by modeling the noise variance as a function of input variables. This is achieved through the introduction of a separate Gaussian process, often referred to as the noise process or the noise model. The noise process provides an estimate of the noise variance associated with each data point, which is then used to adjust the likelihood function in the GPR model. Given a dataset of 𝑁 observations {(𝑥𝑖,𝑦𝑖)}𝑁 𝑖=1, where 𝑥𝑖 rep- resents the input variable and 𝑦𝑖 represents the observed output variable. The observed data 𝑦𝑖 is affected by heteroscedastic noise, meaning that the variance of the noise 𝜖𝑖 depends on the input variable 𝑥𝑖. The model can be characterized by: • Latent Function: The underlying latent function 𝑓 (𝑥) is modeled as a Gaussian process with a mean function 𝜇(𝑥) and a covariance (kernel) function 𝑘(𝑥,𝑥′), as in traditional GPR. • Noise Model: A separate Gaussian process is introduced to model the noise variance as a function of the input variables. This is represented as 𝑔(𝑥), where 𝑔(𝑥𝑖) models the noise variance for each data point 𝑥𝑖. The likelihood function in Heteroscedastic GPR is modified to account for the varying noise levels: 𝑝(𝑦𝑖 |𝑓 (𝑥𝑖),𝑔(𝑥𝑖)) = 1 √︁ 2𝜋𝑔(𝑥𝑖) exp \u0012 − (𝑦𝑖 − 𝑓 (𝑥𝑖))2 2𝑔(𝑥𝑖) \u0013 Here: • 𝑝(𝑦𝑖 |𝑓 (𝑥𝑖),𝑔(𝑥𝑖)) is the likelihood of observing 𝑦𝑖 given the latent function 𝑓 (𝑥𝑖) and the noise variance 𝑔(𝑥𝑖). • 𝑔(𝑥𝑖) represents the estimated noise variance for data point 𝑥𝑖. • 𝑓 (𝑥𝑖) is the value of the latent function at 𝑥𝑖. • 𝑦𝑖 is the observed data point at 𝑥𝑖. The need for Heteroscedastic GPR arises from the requirement to model multiple data points for a given input, where the input (𝑥𝑖) is the day number in the trajectory, and the output (𝑦𝑖) is the set of all real points from that day. 3.5 Evaluation Metrics We base our selection of evaluation based on the objectives of trajectory generation, which we reiterate here for convenience: (1) (Path Similarity) How similar are the points of the synthetic trajectories to the real trajectories? (2) (Cluster Similarity) How well do the synthetic trajectories align with the real trajectories in terms of areas of concen- tration? In order to measure the first point, we use Hausdorff Distance similar to [4], and we utilize the Pearson Correlation Coefficient to measure the similarity of the cluster sets for the second metric. Next, we describe both of them in further detail. 3.5.1 Hausdorff Distance. Hausdorff Distance is a valuable met- ric for assessing the similarity or dissimilarity between movement paths. Trajectory data can be compared using the Hausdorff dis- tance to understand how closely two trajectories align or diverge. The Hausdorff distance thus provides a way to measure the dis- similarity between two trajectories by considering the maximum minimum distance between points of one trajectory to the other trajectory. The mathematical formulation of the Hausdorff distance (Haus- dorff metric) between two sets of points, A and B, in a metric space can be expressed as follows: Given two sets, A and B, each containing a number of points the Hausdorff distance from set A to set B, denoted as H(A, B), is defined as: Hausdorff distance from set 𝐴 to set 𝐵: 𝐻 (𝐴, 𝐵) = max 𝑎∈𝐴 \u0012 min 𝑏∈𝐵 𝑑(𝑎,𝑏) \u0013 Hausdorff distance from set 𝐵 to set 𝐴: 𝐻 (𝐵,𝐴) = max 𝑏∈𝐵 \u0012 min 𝑎∈𝐴 𝑑(𝑏,𝑎) \u0013 where d(a,b) is the distance function that computes the distance between two points. 3.5.2 Coefficient of Correlation. Pearson’s coefficient of correla- tion [1], denoted as \"r\" is a fundamental statistical measure used to WildGEN: Long-horizon Trajectory Generation for Wildlife InfoWild’23, Oct 2023, Birmingham, UK quantify the strength and direction of linear relationships between two distributions. It is a widely used statistical measure that quan- tifies the strength and direction of a linear relationship between two distributions. Here are the key characteristics and aspects of Pearson’s correlation coefficient: • An “𝑟” value of -1 indicates a perfect negative linear relation- ship, where one variable decreases as the other increases in a perfectly linear fashion. • An “𝑟” value of 1 signifies a perfect positive linear relation- ship, where both variables increase together linearly. • An “𝑟” value of 0 implies no linear relationship, indicating that the variables are independent of each other. The calculation of Pearson’s correlation coefficient is based on the formula: 𝑟 = Í (𝑋𝑖 − ¯𝑋)(𝑌𝑖 − ¯𝑌) √︁Í (𝑋𝑖 − ¯𝑋)2 Í (𝑌𝑖 − ¯𝑌)2 Here, 𝑋𝑖 and 𝑌𝑖 represent individual data points from the two variables, and ¯𝑋 and ¯𝑌 are their respective means. 4 EXPERIMENTS 4.1 Datasets The dataset used for our validation is The Western Palearctic greater white-fronted geese dataset [9]. The dataset is hosted and was ob- tained from Movebank1. The dataset contains reading of 91 different birds over a period of several months to multiple years. We prepro- cessed the dataset using Moveapps [8] to limit the observations to one observation per day. Next, the time frames were clipped to a window between March 1 to September 1 (185 days) to capture the northward migration. Any subjects that had significant readings missing during this time frame were dropped. Subjects that were tracked over multiple years were split into multiple samples. Simple data interpolation was utilized to fill in any remaining isolated gaps in the trajectories. The resultant dataset consists of 60 trajectories over a period of 185 days. 4.2 Experimental Settings Here we discuss the implementation details of the WildGEN frame- work as well as the two baselines we compare it against. 4.2.1 Levy Walk/Flight Implementation Details. A simple way of implementing Levy Walk/Flight involves analyzing the step lengths of the trajectory and learning the coefficient of Cauchy distribution (𝛼) from that data. However, the 𝛼 value computed for the dataset was less than 1, which suggests that your step lengths have a very heavy-tailed distribution with an increased likelihood of extremely long steps as depicted by Figure 5. Nonetheless, for the purposes of this work, we used the Trajr R library [12], fed with the following input variables: • Step Length • Angular Error • Linear Error These variables were measured based on the training dataset. 1https://www.movebank.org Figure 4: Real (green) vs Generated (red) Trajectories using Levy Walk/Flight Figure 5: A Histogram of the step length distribution. Note that both axis have a power multiple As per the documentation of Trajr [12], the generated trajectory is computed with direction = 0. In order to guide the movement in the correct northeast direction, the azimuth angle between the average starting point and the average ending point was computed. The generated trajectories were rotated counterclockwise with the computed angle. Similar to WildGEN, the post-processing steps including Smooth- ing and MBR inclusiveness check were applied to the generated trajectories, and trajectories that violated the MBR were discarded. Figure 4 demonstrates the generated trajectories from Levy Walk/Flight. 4.2.2 Heteroscedastic GPR Implementation Details. The Python GPy2 library was used to model Heteroscedastic GPR using the 𝐺𝑃𝐻𝑒𝑡𝑒𝑟𝑜𝑠𝑐𝑒𝑑𝑎𝑠𝑡𝑖𝑐𝑅𝑒𝑔𝑟𝑒𝑠𝑠𝑖𝑜𝑛 class with a trained MLP and Bias kernels optimized on the training data. The GPR utilized a random set of 50% of the training data. This reduced the computational requirements needed to train the Heteroscedastic GPR. 2https://github.com/SheffieldML/GPy InfoWild’23, Oct 2023, Birmingham, UK Figure 6: Real (green) vs Generated (red) Trajectories using Heteroscedastic GPR Figure 7: Training MSE In addition, the variances were computed using the norm of the 𝑙𝑛𝑔 and 𝑙𝑎𝑡 at each point. This helped limit overfitting of the model. It is noteworthy that we also attempted to use the mean tra- jectory to model the GPR and train a Matern kernel based on the mean squared error against each training data sample. This ap- proach was overfitting, and the samples generated were almost indistinguishable. Figure 6 depicts trajectories generated by Heteroscedastic GPR compared to real trajectories. It can be observed that the clusters formed do not visually appear to align with the clusters of the real trajectories. 4.2.3 WildGEN Implementation Details. In the context of this study, the input structure comprises a dataset consisting of 60 records, each encompassing longitude and latitude coordinates, spanning a period of 185 days. These spatial-temporal records are meticulously rearranged into a vector representation composed of 370 inputs. It is noteworthy that prior to further processing, the input data undergoes a normalization step, which involves dividing each input Figure 8: Compressed Space value by 0.3 times the maximum input value, ensuring that the data adheres to a standardized scale. The neural network architecture takes the form of an VAE. It ini- tiates with an input layer of 370 neurons, which serves as the point of entry for the data. Sequentially, the network progresses through a hidden layer featuring 300 neurons, followed by another hid- den layer consisting of 100 neurons. Subsequently, the architecture transitions into a lower-dimensional latent space representation, characterized by a dimensionality of 3. Following the latent space encoding, the network proceeds with two additional hidden layers, each comprising 100 neurons, facilitating the extraction of essential data features. The network culminates in a final hidden layer con- taining 300 neurons, serving as the penultimate stage. Ultimately, the network’s journey concludes with an output layer designed to match the initial input’s dimensionality, comprising 370 units. This VAE architecture effectively captures data patterns, allowing for both data compression and reconstruction. Activation functions are carefully chosen for each layer to regu- late the flow of information through the neural network. The first hidden layer is governed by a modified Rectified Linear Unit (ReLU) activation function, while the second hidden layer employs a linear activation function. The latent space is also characterized by a lin- ear activation function. Notably, the fourth and fifth hidden layers utilize a modified ReLU activation function, which is characterized in this work by a slope of 0.06 for positive values of the argument and a slope of 0.001 for negative values. In this VAE-based study, the Mean Squared Error (MSE) is the primary loss function, assessing data reconstruction quality. The MSE, as shown in Figure7, quantifies the model’s ability to suc- cessfully replicate input data within its latent space. Additionally, a Gaussian Mixture Model (GMM) with 15 components is fitted to the latent space using the 60 compressed samples shown in Figure 8, for deeper insight into data distribution. To generate trajectories, we employ a sampling approach within the latent space, drawing samples from the GMM, as showcased in Figure 8, and subsequently propagate these samples through the decoder network. Smoothing: The Savitzky-Golay Smoothing was implemented against each trajectory based on a manual visual tuning of the WildGEN: Long-horizon Trajectory Generation for Wildlife InfoWild’23, Oct 2023, Birmingham, UK Figure 9: Savitzky-Golay Smoothing Filter: Before (blue) and After (red) for a sample generated trajectory Figure 10: A Minimum Bounding Region based on the real trajectories parameters, namely window size and polynomial order. As Fig 9 demonstrates, the filter can reduce excessive wandering of the generated trajectories in comparison with the real trajectories. MBR: The Minimum Bounding Region (MBR) was calculated from the real trajectories to constrain the region in which the birds can fly. In different problems, one or multiple MBRs can be used to signify water bodies, impenetrable mountain ranges, and other terrain-based obstacles. The MBR step discards any trajectory that does not fully lie inside the calculated MBR. This has resulted in discarding 29.6% of the generated trajectories and retaining the remaining trajectories. 4.3 Model Comparison In order to compare the models, the first 60 eligible trajectories from each model’s synthetic set were used to match the set of real (a) Sillouhette score (b) Distortion (Elbow Method) Figure 11: Choosing the best value of K for K-means cluster- ing based on two separate methods trajectories on the evaluation metrics. The remaining trajectories were not used during the benchmarking process in this step. 4.3.1 Path Similarity. The Hausdorff distance between each pair of trajectories from the synthetic and real set were compared. Only the lowest value was retained for each synthetic trajectory. In other words, for each generated trajectory, the distance was computed with the trajectory closest to it from the real trajectory set. We report the minimum, mean, and average distance for each model in Table 2. 4.3.2 Cluster Similarity Calculation. K-means clustering was per- formed on the set of all points, i.e. Ø 𝑖 {𝑝𝑖 1, 𝑝𝑖 2, . . . , 𝑝𝑖 𝑛} for all 𝑇𝑖. The value of 𝐾 was chosen using a Silhouette Score and validated visually using the Elbow method [15]. The number of clusters based on the geographic projection of the real trajectory should be between 10 and 15; K=13 was used in our experiments. The trained clustering model was applied to the generated trajec- tory points of each model, and the Pearson Correlation Coefficient was calculated based on the distribution of points in each cluster. 4.3.3 Results. From Table 2, we can observe that WildGEN pro- vides a better overall Hausdorff Distance on average than the other models. Further, the clusters of WildGEN have better correspon- dence to the real trajectories. While Heteroscedastic GPR performs well on the Hausdorff distance metric, the results are influenced by the low variance in the model. It is visually apparent that trajecto- ries generated by Heteroscedastic GPR follow the same path with little variance through the first half of the trajectory as depicted in Figure 6. On the other hand, it can be observed that Levy Walk/Flight fails to generate any realistic trajectories. The metrics also indicate that the trajectories generated fail to capture any properties of the real trajectories. This is not surprising given the limited amount of information about the real trajectories that can be fed into the algorithm. However, WildGEN performs well on the metrics in line with vi- sual inspection. It performs significantly better than Levy Walk/Flight on average Hausdorff Distance and provides a 15.5% improvement on average compared to Heteroscedastic GPR. There is a very high correlation between the cluster distributions and the generated points are closer on average to real trajectory points which is al- most double the cluster similarity observed using Heteroscedastic GPR. InfoWild’23, Oct 2023, Birmingham, UK Table 1: Test Results for Hausdorff Distance and Pearson Correlation Coefficient Method Hausdorff Distance Pearson (r) Min Max Avg Levy Walk/Flight 22.251 39.799 30.590 -0.0669 Heteroscedastic GPR 5.760 7.155 6.208 0.4563 WildGEN 3.542 7.450 5.244 0.9936 4.4 Ablation Study In the ablation study, we want to measure the effects of Smoothing and Minimum Bounding Region (MBR) on the metrics measured. Table 2: Test Results for Hausdorff Distance and Pearson Correlation Coefficient Method Hausdorff Distance Pearson (r) Min Max Avg No Post Processing 0.306 9.440 4.172 0.9881 Smoothing Only 3.542 10.047 5.565 0.9865 MBR Only 0.395 6.425 3.849 0.9928 WildGEN 3.542 7.450 5.244 0.9936 In order to perform the ablation study correctly, we ran the ex- periments on a random sample of trajectories, applied the specified method on the same set, and retained only the first 60 trajectories in line with the experiments in the previous section. The outcomes of our ablation study reveal that smoothing alone yields diminished results of the Hausdorff distance and Pearson Correlation Coefficient. However, as discussed previously, smooth- ing effectively addresses a specific visual challenge, notably the mitigation of excessive wandering. To provide a mathematical eval- uation of the advantages provided by smoothing, we may need to consider additional metrics. On introducing MBR to our trajectories, the measurable impact of smoothing diminishes. Nevertheless, the combined application of both smoothing and MBR yields a small improvement in the Pearson Correlation Coefficient. It can be observed that the penalization against the Hausdorff distance metric extends to the WildGEN scenario. Our findings also serve to validate the viability of the raw tra- jectories generated by the VAE, as corroborated by the metrics introduced. Notably, the utilization of smoothing significantly con- tributes to their improved visual inspection when compared to real trajectory data. It is important to note that comparing Smoothing Only and MBR Only scenarios is not completely objective. This is because MBR excludes many trajectories that the smoothing step retains. On the other hand, if we doctor the random set to ensure that only trajectories that meet the MBR criteria are used in the ablation study, it would defeat the purpose of the improvements of MBR. In that case, MBR and No Post Processing would have identical results. 5 CONCLUSIONS AND FUTURE WORK This work presented a novel method by which synthetic trajectories may be generated on a long horizon. The framework, WildGEN, can be characterized as follows: • Generate near-real, long-horizon trajectories based on a rel- atively small number of real trajectories • Performs post-processing steps to further improve the gen- erated trajectories • Shows improved accuracy compared to the state-of-the-art methods Based on the findings from this work, there are multiple avenues for future work. A key limitation identified is the evaluation met- rics used are not sufficiently representative of a good trajectory. In particular, Hausdorff distance fails to capture the enhancement in the trajectory, and it is necessary to test other metrics such as Frechet Distance to better assess the effect of smoothing. It is also interesting to identify and utilize other potential smoothing filters. In addition, as a follow-up to this work, we intend to: • Utilize other generative models, including normalizing flows that can provide the pertinent statistical weights of the gen- erated trajectories • Extend and further investigate the applicability of Wild- GEN for various wildlife trajectory scenarios, including land- based and water-based animals. REFERENCES [1] Agustin Garcia Asuero, Ana Sayago, and AG González. 2006. The correlation coefficient: An overview. Critical reviews in analytical chemistry 36, 1 (2006), 41–59. [2] Helen Bailey and Paul Thompson. 2006. Quantitative analysis of bottlenose dolphin movement patterns and their relationship with foraging. Journal of Animal Ecology 75, 2 (2006), 456–465. [3] Carita M Bergman, James A Schaefer, and SN Luttich. 2000. Caribou movement as a correlated random walk. Oecologia 123, 3 (2000), 364–374. [4] Xinyu Chen, Jiajie Xu, Rui Zhou, Wei Chen, Junhua Fang, and Chengfei Liu. 2021. TrajVAE: A Variational AutoEncoder model for trajectory generation. Neurocomputing 428 (2021), 332–339. https://doi.org/10.1016/j.neucom.2020.03. 120 [5] Jon S Horne, Edward O Garton, Stephen M Krone, and Jesse S Lewis. 2007. Analyzing animal movements using Brownian bridges. Ecology 88, 9 (2007), 2354–2363. [6] I Iglesias, F Montes, M Martínez, A Perez, A Gogin, D Kolbasov, and A de la Torre. 2018. Spatio-temporal kriging analysis to identify the role of wild boar in the spread of African swine fever in the Russian Federation. Spatial statistics 28 (2018), 226–235. [7] Diederik P Kingma, Max Welling, et al. 2019. An introduction to variational autoencoders. Foundations and Trends® in Machine Learning 12, 4 (2019), 307–392. [8] Andrea Kölzsch, Sarah C Davidson, Dominik Gauggel, Clemens Hahn, Julian Hirt, Roland Kays, Ilona Lang, Ashley Lohr, Benedict Russell, Anne K Scharf, et al. 2022. MoveApps: a serverless no-code analysis platform for animal tracking data. Movement Ecology 10, 1 (2022), 30. [9] A Kölzsch, GJDM Müskens, S Moonen, H Kruckenberg, P Glazov, and M Wikelski. 2019. Data from: Flyway connectivity and exchange primarily driven by moult migration in geese [North Sea population]. https://doi.org/doi:10.5441/001/1. ct72m82n [10] Quoc V Le, Alex J Smola, and Stéphane Canu. 2005. Heteroscedastic Gaussian process regression. In Proceedings of the 22nd international conference on Machine learning. 489–496. [11] Michael T. Main, Robert A. Davis, David Blake, Harriet Mills, and Tim S. Doherty. 2020. Human impact overrides bioclimatic drivers of red fox home range size globally. Diversity and Distributions 26, 9 (2020), 1083–1092. Publisher: Wiley Online Library. [12] Donald James McLean and Marta A Skowron Volponi. 2018. trajr: an R package for characterisation of animal trajectories. Ethology 124, 6 (2018), 440–448. [13] Eric Renshaw and Robin Henderson. 1981. The correlated random walk. Journal of Applied Probability 18, 2 (1981), 403–414. WildGEN: Long-horizon Trajectory Generation for Wildlife InfoWild’23, Oct 2023, Birmingham, UK (a) Raw (b) Smoothed (c) MBR Filtered (d) WildGEN Figure 12: The effect of different components on WildGEN on the generated trajectories [14] A. M. Reynolds. 2009. Scale-free animal movement patterns: Lévy walks outper- form fractional Brownian motions and fractional Lévy motions in random search scenarios. Journal of Physics A: Mathematical and Theoretical 42, 43 (Oct. 2009), 434006. https://doi.org/10.1088/1751-8113/42/43/434006 [15] Danny Matthew Saputra, Daniel Saputra, and Liniyanti D Oswari. 2020. Effect of distance metrics in determining k-value in k-means clustering using elbow and silhouette method. In Sriwijaya International Conference on Information Technology and Its Applications (SICONIAN 2019). Atlantis Press, 341–346. [16] Ronald W Schafer. 2011. What is a Savitzky-Golay filter?[lecture notes]. IEEE Signal processing magazine 28, 4 (2011), 111–117. [17] Leena Singh and James Fuller. 2001. Trajectory generation for a UAV in ur- ban terrain, using nonlinear MPC. In Proceedings of the 2001 American Control Conference.(Cat. No. 01CH37148), Vol. 3. IEEE, 2301–2308. [18] Georgios Technitis, Walied Othman, Kamran Safi, and Robert Weibel. 2015. From A to B, randomly: a point-to-point random trajectory generator for animal move- ment. International Journal of Geographical Information Science 29, 6 (2015), 912–934. [19] Jan A. Venter, Herbert HT Prins, Alla Mashanova, Willem F. de Boer, and Rob Slotow. 2015. Intrinsic and extrinsic factors influencing large African herbivore movements. Ecological Informatics 30 (2015), 257–262. Publisher: Elsevier. [20] Xingrui Wang, Xinyu Liu, Ziteng Lu, and Hanfang Yang. 2021. Large scale GPS trajectory generation using map based on two stage GAN. Journal of Data Science 19, 1 (2021), 126–141. [21] Marina E Wosniack, Marcos C Santos, Ernesto P Raposo, Gandhi M Viswanathan, and Marcos GE Da Luz. 2017. The evolutionary origins of Lévy walk foraging. PLoS computational biology 13, 10 (2017), e1005774. [22] Vasily Zaburdaev, Sergey Denisov, and Joseph Klafter. 2015. Lévy walks. Reviews of Modern Physics 87, 2 (2015), 483. [23] Zhaoyu Zhang, Mengyan Li, and Jun Yu. 2018. On the convergence and mode collapse of GAN. In SIGGRAPH Asia 2018 Technical Briefs. 1–4. "
}