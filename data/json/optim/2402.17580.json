{
    "optim": "A HIGHLY EFFICIENT COMPUTATIONAL APPROACH FOR PART-SCALE MICROSTRUCTURE PREDICTIONS IN TI-6AL-4V ADDITIVE MANUFACTURING Sebastian D. Proell∗ Institute for Computational Mechanics Technical University of Munich 85748 Garching b. M¨unchen sebastian.proell@tum.de Julian Brotz Institute for Computational Mechanics Technical University of Munich 85748 Garching b. M¨unchen Martin Kronbichler Faculty of Mathematics Ruhr University Bochum 44780 Bochum Wolfgang A. Wall Institute for Computational Mechanics Technical University of Munich 85748 Garching b. M¨unchen Christoph Meier Institute for Computational Mechanics Technical University of Munich 85748 Garching b. M¨unchen February 28, 2024 ABSTRACT Fast and efficient simulations of metal additive manufacturing (AM) processes are highly relevant to exploring the full potential of this promising manufacturing technique. The microstructure composition plays an important role in characterizing the part quality and deriving mechanical properties. When complete parts are simulated, one often needs to resort to strong simplifications such as layer-wise heating due to the large number of simulated time steps compared to the small time step sizes. This article proposes a scan-resolved approach to the coupled thermo-microstructural problem. Building on a highly efficient thermal model, we discuss the implementation of a phenomenological microstructure model for the evolution of the three main constituents of Ti-6Al-4V: stable αs-phase, martensite αm-phase and β-phase. The implementation is tailored to modern hardware features using vectorization and fast approximations of transcendental functions. A performance model and numerical examples verify the high degree of optimization. We demonstrate the applicability and predictive power of the approach and the influence of scan strategy and geometry. Depending on the specific example, results can be obtained with moderate computational resources in a few hours to days. The numerical examples include a prediction of the microstructure on the full NIST AM Benchmark cantilever specimen. Keywords powder bed fusion additive manufacturing, part-scale, microstructure, performance modeling 1 Introduction Laser powder bed fusion (LPBF) is a prominent additive manufacturing (AM) technique that allows the design and production of parts with complex geometry in a near-net-shape manner. However, a successful build can require ∗corresponding author arXiv:2402.17580v1  [cs.CE]  27 Feb 2024 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing expensive trial-and-error runs beforehand or the adoption of overly conservative parameter choices. The microstructure provides a critical insight into the material behavior of manufactured parts [34]. Understanding its evolution through numerical simulations offers the opportunity to significantly reduce the costs measured in time and money and enhance the physical understanding of the LPBF process. While subsequent heat treatment often changes the as-built microstructure, the information is highly relevant during processing, as significant differences in material behavior can lead to defects during processing and failure to build a part. Ultimately, a great promise lies in the local control of the microstructural phase composition as the specific application desires. From a numerical modeling point of view, LPBF is a multi-scale and multi-physics problem [19]. In this contribution, we focus on the effects on the microscale, specifically the composition and evolution of microstructure phases for the commonly used alloy Ti-6Al-4V. The microstructure model in this contribution was first discussed in our contribution [23]. Based on the classification in [12], it falls in the category of phenomenological [8, 17, 21, 29, 35] microstructure models, with alternative approaches being statistical [22, 14, 27, 9, 28] and phase-field [7, 13] models. A phenomenological microstructure model provides a reasonable trade-off between the costly evaluation of a phase-field model and the limited physical motivation of purely statistical models. A significant difference between [23] and other phenomenological models is that the evolution of the microstructural phases is governed by temperature-dependent diffusive and instantaneous forces driving the phase composition towards an equilibrium state. From a mathematical perspective, the model consists of coupled ordinary differential equations (ODEs) for the three phases, which are β-phase, stable αs-phase, and metastable martensitic αm-phase. To the best of the authors’ knowledge, no coupled thermo-microstructure simulation with scan-resolved tracks on the part-scale has been published before. Nevertheless, efforts in this direction were undertaken by some groups. In [26] and [20], the authors determined correlations between experimentally measured microstructural phase compositions and numerical results for the temperature field of larger parts without an explicit microstructure model. In [6], the authors inform a phase-field model for microstructure evolution with a single-track melt pool simulation. The cellular automata microstructure model used in [14] aims at the part-scale by replicating the thermal information from a few representative layers and tracks over multiple layers. A similar strategy is used in [33] and combined with a phase-field model for the sub-grain scale. Many authors integrate analytical Johnson-Mehl-Avrami-Kolmogorov (JMAK) equations into thermal or thermo-mechanical models [8, 17, 29, 35]. In our publication [23], we already determined the microstructure for application-motivated temperature profiles at selected points and for a quenching example of a large block. In contrast to all the cited references, this article presents a fully coupled thermo-microstructure model that considers the resolved laser scan track and is not restricted to regular geometries. The microstructure is determined in the whole domain at all points in time. An essential aspect of macroscale simulations is the question of the implementation’s performance in terms of time to solution. For the coupled thermo-microstructure problem, the thermal history drives the evolution of the microstructure. Thus, a fast and accurate solution to the thermal problem is necessary. In our previous work [25], we presented a highly efficient solution to the thermal problem with a resolved laser scan track over hundreds of layers. In contrast to many existing approaches, we can simulate parts on the centimeter scale in a time frame on the order of hours or days. The present contribution builds on that work and allows us to predict the composition of microstructure phases in the same setting with only marginally increased time to solution. To achieve this level of performance for the microstructure model, we carefully analyzed the many conditional branches in the governing equations. Our implementation is tailored to modern hardware capabilities as it can utilize vectorization efficiently and considers the need to reduce memory transfer as much as possible. Efficient approximations of transcendental functions [30, 18, 24], e.g., the exponential function, which can be vectorized efficiently, are discussed. We present a detailed performance analysis with the help of a roofline performance model. The article is structured as follows: after briefly reviewing the thermal and microstructure model, we focus on the latter’s numerical discretization and implementation details. Specifically, we discuss the implementation tailored to modern hardware and present efficient approximations for expensive transcendental functions. We study the implementation performance on benchmarks and application examples. The investigated, practically relevant examples demonstrate a wide range of applicability of the approach and fast solution times. A notable example is the NIST AMBench 2022 cantilever geometry [16], for which we predict the as-built microstructure. 2 Coupled thermo-microstructure model This section summarizes model equations. An emphasis is placed on details especially relevant to the efficient solution strategy presented later in this article. We refer to the respective publications for the full details of the thermal [25] and microstructure [23] models. 2 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing 2.1 Thermal model First, we briefly summarize the thermal part of the problem following [25]. The temperature field T is determined in the domain Ω by solving the heat equation: ρc∂T ∂t = −∇ · q + qvol, q = −k(T)∇T in Ω, (1) Here, ρ is the density and c is the specific heat capacity of the material. The temperature and state-dependent heat conductivity k can be computed from the liquid fraction g(T), defined as g(T) =      0, T < Ts, T −Ts Tl−Ts , Ts ≤ T ≤ Tl 1, T > Tl, (2) where Ts and Tl are the solidus and liquidus temperature. The time-dependent consolidated fraction rc(t) = ( 1, if rc(0) = 1 (i.e. initially consolidated) max ˜t<t g(T(˜t)), if rc(0) = 0 (i.e. initially powder) . (3) captures the irreversible powder-to-melt transition and allows setting the initial material state. From (2) and (3), the actual fractions of powder (p), melt (m) and solid (s) material are computed as rp(rc) = 1 − rc, rm(T) = g(T), rs(T, rc) = rc − g(T), (4) and finally, the temperature- and history-dependent heat conductivity k(T, rc) is found: k(T, rc) = rp(rc)kp + rm(T)km + rs(T, rc)ks, (5) where kp, ks and km are the parameters for a single state. A cylindrical volumetric heat source qvol formulated in a local coordinate system (ˆx, ˆy, ˆz) models the incident energy from a moving laser beam: qvol = ( 2Weff πR2hpowder exp \u0010 −2(ˆx2+ˆy2) R2 \u0011 , if 0 < ˆz < −hpowder 0, otherwise , (6) Here, R is the effective beam radius of the incident energy beam, Weff is the effective power and hpowder is the powder layer thickness. The necessary initial and boundary conditions for the heat equation (1) are given as: T = T0 in Ω for t = 0, (7) T = T0 on ΓD, (8) q · n = 0 on ΓN, (9) q · n = qrad + qevap on ΓRE, (10) qrad = ϵσS(T 4 − T 4 ∞), (11) qevap = 0.82CP exp \u0014 −CT \u0012 1 [T] − 1 Tv \u0013\u0015 s CM [T] (hv + c([T] − Th,0)), if [T] > Tv. (12) All material is initially pre-heated to a temperature T0. The material parameters required for the initial boundary value problem are listed in Table 1. In addition, σS in (11) is the Stefan-Boltzmann constant. To avoid numerical challenges arising from the strong nonlinearity in the evaporation term (12), the temperature [T] is limited to a maximum value Tmax > Tv. In this study, we opt for Tmax = Tv + 1000 K, which ensures numerical stability without affecting the overall results. 2.2 Microstructure model A phenomenological model for the microstructure evolution was presented in [23]. This model focuses on the three most important phases2, β, αs and αm. While the thermal model needs to consider the powder material state, we can 2Note that the word ‘phase’ refers to the microstructure phases αs, αm, and β. In contrast, when we distinguish material into powder, melt, and solid, we speak of the ‘state’ of the material. 3 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing Table 1: Thermal model parameters for Ti-6Al-4V. Symbol Property Value Unit kms Thermal conductivity in melt and solid phase 28.6 W m−1 K−1 kp Thermal conductivity in powder phase 0.286 W m−1 K−1 ρ Density 4090 kg m−3 c Specific heat capacity 1130 J kg−1 K−1 Ts Solidus temperature 1878 K Tl Liquidus temperature 1928 K T∞ Ambient temperature 293 K ϵ Emissivity 0.7 – Tv Boiling temperature 3130 K CP Recoil pressure factor 54 kPa CT Recoil pressure temperature factor 5.07 × 104 K CM Heat loss temperature factor 9.15 × 10−4 K s2 m−2 M Molar mass 0.0478 kg mol−1 hv Latent heat of evaporation 8.84 MJ kg−1 Th,0 Enthalpy reference temperature 538 K neglect it in the context of the microstructure model. We define phase fractions Xi ∈ [0; 1] for the microstructure phases along with elementary continuity constraints: Xsol + Xliq = 1, (13) Xα + Xβ = Xsol, (14) Xαs + Xαm = Xα. (15) The liquid phase fraction Xliq and, by virtue of (13), the solid phase fraction Xsol are again computed according to g(T) (2) as Xliq = g(T), Xsol = 1 − g(T). (16) While, for now, the definitions of Xsol and Xliq seem redundant to the state described in (4), they make for a cleaner notation, and the duplicate definition allows us to treat them slightly differently in terms of numerics later on. Also, note that the powder state is now implicitly part of the solid state. The transformation from solid to liquid state and vice versa is thus complete, and the remainder of this section focuses on the microstructure phase transformations. Before the evolution equations for the phase fractions can be defined, we introduce two equilibrium phase fractions associated with material cooling from a molten state to ambient temperature T∞. All newly solidified solid material consists entirely of β-phase. On further cooling, the β-phase can transform into stable αs-phase. The fraction Xeq α (T) determines the amount of stable α-phase at a given temperature in thermodynamic equilibrium. It follows an exponential Koistinen-Marburger law: Xeq α (T) =    0.9 for T < Tαs,end, 1 − exp[−keq α (Tαs,start − T)] for Tαs,end ≤ T ≤ Tαs,start, 0 for T > Tαs,start, (17) where the parameters keq α , Tαs,start and Tαs,end are obtained either directly from the literature or fitted to experimental data in [23]. Their values are listed in Table 2. Notably, the actual fraction of stable α-phase Xαs at a given temperature is, in general, not identical to the equilibrium value in (17), which is only reached when the cooling rate is very low. Instead, the equilibrium value can be interpreted as the long-term solution for t → ∞. The formation of αs is driven by a diffusion process as detailed below. If the cooling rate is high, this diffusion process is inhibited, and metastable martensite αm-phase forms instead. Again, we define a pseudo equilibrium phase fraction Xeq αm,0 for martensitic αm-phase for high cooling rates: Xeq αm,0(T) =    0.9 for T < T∞ 1 − exp[−keq αm(Tαm,start − T)] for T∞ ≤ T ≤ Tαm,start 0 for T > Tαs,start (18) 4 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing αs αm β diﬀusive instantaneous Figure 1: Possible transformation paths between different microstructure phases. with the parameters keq αm and Tαm,start listed in Table 2. Again, the actual fraction of martensitic αm-phase Xαm at a given temperature is not necessarily identical to the equilibrium value Xeq αm,0. Equations (17) and (18) for the equilibrium fractions are incompatible for specific temperature values, in the sense that, e.g., for T = T∞ their values sum to 1.8, which is larger than 1. The transformation from β-phase to αs-phase happens in a strictly higher temperature interval than the transformation from β-phase to αm-phase for the material parameters listed in Table 2. For this reason, the incompatibility is resolved by the introduction of the following effective pseudo-equilibrium phase fraction: Xeq αm(T) = Xeq αm,0(T) · 0.9 − Xαs 0.9 . (19) This means that the martensite equilibrium fraction Xeq αm is corrected based on the already formed fraction of stable αs-phase, with the effect that Xαs + Xeq αm ≤ 0.9. The formation and dissolution of the three phases αs, αm and β is governed by the following ordinary differential equations: ˙Xαs = ˙Xβ→αs + ˙Xαm→αs − ˙Xαs→β, (20) ˙Xαm = ˙Xβ→αm − ˙Xαm→αs − ˙Xαm→β, (21) ˙Xβ = ˙Xαm→β + ˙Xαs→β − ˙Xβ→αm − ˙Xβ→αs, (22) where ˙Xi→j is the formation of phase j from phase i or, equivalently, the dissolution from phase i into phase j. Note that ˙Xi→j ̸= ˙Xj→i, since the reverse transformation might not even exist (e.g., for the transformation from martensite to stable αs phase) or is governed by different kinetics. A graphical overview of the transformation processes is shown in Figure 1. The transformation αm ↔ β occurs on a much shorter time scale than αs ↔ β. Therefore, we treat the phase change αm ↔ β as instantaneous, while the transformations αs ↔ β and αm → αs are modeled as a diffusive process. For T < Ts, the sum of (20)–(22) yields ˙Xαs + ˙Xαm + ˙Xβ = 0 if T < Ts, (23) allowing us to directly express the β-phase fractions as Xβ = Xsol − Xαs − Xαm. (24) This makes integration of (22) unnecessary. The following set of logistic differential equations describes the diffusion-driven transformation processes: ˙Xβ→αs = ( kαs(T) (Xαs) cαs −1 cαs \u0000Xeq α − Xα \u0001 cαs +1 cαs if Xα < Xeq α , 0 otherwise (25) ˙Xαm→αs = ( kαs(T) (Xαs) cαs −1 cαs (Xαm) cαs +1 cαs if Xαm > 0, 0 otherwise (26) ˙Xαs→β = ( kβ(T) (0.9 − Xα) cβ −1 cβ \u0000Xα − Xeq α \u0001 cβ +1 cβ if Xα > Xeq α , 0 otherwise (27) which are completed by temperature-dependent diffusion rates, kαs(T) = k1 1 + exp[−k3(T − k2)] and kβ(T) = f · kαs(T). (28) 5 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing Table 2: Parameters of the microstructure evolution model. A detailed analysis and literature review of all parameters is given in [23]. Parameter Description Value Unit Tl Liquidus temperature 1928 K Ts Solidus temperature 1878 K Tαs,start Upper end of temperature range for β → αs transformation 1273 K Tαs,end Lower end of temperature range for β → αs transformation 935 K Tαm,start Upper end of temperature range for β → αm transformation 848 K T∞ Ambient temperature 293 K keq α αs-phase equilibrium concentration constant 0.0068 K−1 keq αm αm-phase equilibrium concentration constant 0.00415 K−1 Table 3: Fitted parameters of the microstructure evolution model. A detailed explanation of the calibration process is given in [23]. Parameter Value Unit cαs 2.51 – cβ 11.0 – k1 0.294 s−1 k2 850 K k3 0.0337 K−1 f 3.8 – In total, six parameters, cαs, cβ, k1, k2, k3 and f, govern the diffusion process. Their values were determined by fitting experimental data in [23] and are summarized in Table 3. When cooling down below Tαm,start the martensite phase fraction instantaneously follows the pseudo-equilibrium phase fraction: Xαm = Xeq αm, if T < Tαm,start (29) which is already corrected according to (19) such that martensite only forms from β-phase if the αs-phase is below the equilibrium concentration. When heating material, the martensite phase fraction instantaneously dissolves into β-phase according to: Xαm = max(Xeq α − Xαs, 0), if Xα > Xeq α (30) This implies that no previously formed martensite remains when T > Tαs,start. To fully dissolve the stable αs-phase when further heating the material, we introduce a regularization, Xαs = min \u0012 Xαs, 0.9Tαs,start + Tαs,reg − T Tαs,reg \u0013 , if Tαs,start < T < Tαs,reg, (31) Thus, the αs-phase fraction decreases linearly from a maximum of 0.9 to zero in the regularization interval [Tαs,start, Tαs,start + Tαs,reg]. In this contribution, we choose Tαs,reg = 100 K. The regularization has the effect that no αs-phase but only β-phase remains once the solidus temperature Tsol is reached and material begins to melt. Without the regularization, it would be possible to retain αs-phase until Tsol; however, in that case, one would need to model the melting of a mixture of two phases. Since the exact phase composition in the high-temperature region is not of interest and due to the lack of experimental data, we choose the outlined strategy for temperatures above Tαs,start. 3 Numerical methods and efficient implementation The thermal problem is solved with an efficient FEM implementation [25] based on fast operator evaluation [15]. Implementation is performed with the deal.II library [4]. Notably, we use an explicit scheme for the active laser phase where small time step sizes are necessary to obtain a continuous melt track. In the interlayer cool down phase after every layer, we use an implicit scheme allowing larger time step sizes. This approach is extended to the microstructure model where we introduce a fast explicit and a more accurate and robust implicit scheme. The microstructure model is integrated into the existing approach as a one-way coupled problem that is solved after the thermal model in every time step. Since the microstructure model does not explicitly depend on the spatial coordinate, 6 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing the problem is fully decoupled in space. The ODEs can be solved independently at every point in space. It is sufficient to place the degrees of freedom (DoFs) of the microstructure model (phases Xβ, Xαs and Xαm) in the same spatial positions as the thermal DoFs (temperature T). This choice has the advantage that no communication and interpolation is necessary to obtain the temperature to evaluate the microstructure model. The spatial discretization is realized as an adaptive mesh. When activating a new layer, more refined cells are placed in the highest active layer and a few layers beneath. The mesh can be coarsened at later stages when the material history allows for it. Previously, the only history variable that needed to be considered for the thermal model was the consolidated fraction rc. In this contribution, the three microstructure phases also represent a material history that should not be coarsened inadvertently. Therefore, an octant consisting of eight sibling cells of equal refinement level will only be coarsened when, for every microstructure phase, all its values are sufficiently close to each other. For more general details of the adaptive and growing mesh, the reader is referred to [25]. 3.1 Time integration of microstructure model To ease the notation, the unknown fractions of stable and martensitic α-phase are collected in a state vector m = [Xαs, Xαm]. The β-phase fractions can be processed for a given state and temperature as, Xβ(m, T) = Xsol(T) − Xαs − Xαm. (32) The right-hand side of the differential equations (20)–(21) is split into a diffusion-based and instantaneous contribution: ˙m = \u0014 ˙Xαs ˙Xαm \u0015 = \u0014 ˙Xβ→αs + ˙Xαm→αs − ˙Xαs→β − ˙Xαm→αs \u0015 | {z } =: ˙mdiff + \u0014 0 ˙Xβ→αm − ˙Xαm→β \u0015 | {z } =: ˙minst (33) Integrating (33) from a point in time tn to a point in time tn+1 = tn + ∆t yields, mn+1 = mn + Z tn+1 tn ˙mdiff dt + Z tn+1 tn ˙minst dt (34) where the superscript indicates at which point in time a quantity is evaluated. The phase fractions mn and the temperature T n+1 are known. A numerical time integration scheme will approximate the first integral over the diffusion- driven contribution. Note that the second integral over the (non-differentiable) instantaneous change rate yields a finite value for the absolute change. These instantaneous changes are defined in (29) and (30). Explicit time integration We split (34) into a two-stage process, where integration of the diffusion-based term is performed with a forward Euler scheme towards an intermediate state ˜mn+1, followed by a correction step: ˜mn+1 = mn + ∆t ˙mdiff(T n, mn), (35) mn+1 = g(T n+1, ˜mn+1). (36) Here, we define a correction function g(T, m), which contains the instantaneous changes for the martensite phase as well as corrections that are necessary to satisfy the continuity constraints (13)–(15). Furthermore, if either Xαs or Xαm falls below zero, it is instead set to zero. If Xα exceeds the maximum equilibrium fraction of 0.9, both, Xαs or Xαm are reduced while maintaining the ratio Xαs/Xαm. Two exceptional cases become apparent when examining (25) and (27). Both equations pose a problem for the explicit time integration scheme presented so far. Evaluating (25) for Xαs = 0, Xαm = 0, Xβ = 1.0 gives a rate of zero, which implies that a solution computed with the explicit scheme can never evolve out of the initial state. Thus, we initiate the diffusion process with the help of an approximate analytical solution described in more detail in [23]. The same strategy can be applied to (27) which suffers from the same problem for Xαs = 0.9, Xαm = 0, Xβ = 0.1. Due to the numeric values of the physical constants, the second case is prone to cancellation of significant digits. An appropriate reformulation can be found in Appendix A. The presented explicit time integration scheme does not come with a stability limit due to the correction function g(T, m) being applied after every step. Therefore, the solution cannot grow arbitrarily large, and classical stability considerations do not apply to the specific scheme used here. Still, the time step size should be chosen within limits to obtain a sufficiently accurate solution. 7 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing Implicit time integration We use a Crank-Nicolson time integration scheme for the diffusion-based term and reuse the same correction function g as in the explicit case: ˜mn+1 = mn + 1 2∆t \u0000 ˙mdiff(T n+1, mn+1) + ˙mdiff(T n, mn) \u0001 , (37) mn+1 = g(T n+1, ˜mn+1). (38) The nonlinear equation (37) is solved employing a fixed-point iteration: mn+1 i+1 = g \u0012 T n+1, mn + 1 2∆t \u0000 ˙mdiff(T n+1, mn+1 i ) + ˙mdiff(T n, mn) \u0001 | {z } ˜ mn+1 i+1 \u0013 , (39) mn+1 0 = mn, (40) until the weighted root-mean-square (WRMS) norm of the residual rn+1 i+1 = mn+1 i+1 − \u0012 mn + 1 2∆t \u0000 ˙mdiff(T n+1, mn+1 i+1 ) + ˙mdiff(T n, mn) \u0001\u0013 (41) = ∆t 2 \u0000 ˙mdiff(T n+1, mn+1 i ) − ˙mdiff(T n+1, mn+1 i+1 ) \u0001 (42) falls below a threshold. The WRMS norm is defined as ||a||WRMS = 1 N N X j=1 (ajwj)2, where wj = (εabs + ¯ajεrel)−1 (43) with an absolute tolerance εabs = 1 × 10−10 and a relative tolerance εrel = 1 × 10−3. It can easily be verified that the iteration scheme prescribed in (39) is a contraction on Xi ∈ (0, 0.9), and thus converges to a unique solution if the time step size ∆t is sufficiently small. This proof holds for time step sizes up to around 0.001 s. However, we experimentally observe fast and robust convergence for time step sizes up to 1 s. We use a subcycling scheme to achieve sufficient accuracy, where a large time step performed in the thermal model is subdivided into substeps not exceeding a maximum size ∆tsub = 0.01 s. 3.2 Vectorized computation Modern CPUs support vector operations on specialized execution units that perform the same operation on a (small) array of different data, an idiom commonly called Single Instruction Multiple Data (SIMD). This small array has nlanes entries and will be referred to as a vectorized array. A useful C++ type VectorizedArray overloading basic arithmetic operations is provided by the deal.II library. Similar data types are available in the experimental C++ standard implementation [1] or as stand-alone libraries [11]. The overloaded operations simultaneously perform the arithmetic operation on all lanes by calling the respective, hardware-specific intrinsic functions. For instance, the latest Intel AVX512 instruction set architecture supports eight concurrent double-precision operations. This capability promises to significantly speed up computation-heavy code paths by a factor of nlanes when fully utilized. Using SIMD operations demands contiguous data storage in memory for maximum performance benefits. Furthermore, the concurrently processed data should be independent, i.e., the computation in one vector lane may not depend on a computation in another lane of the same vector. The classical and automatic approach to vectorization is to look at inner loops or plain code and let the compiler identify nearby operations of the same kind that could go to different lanes. The results of auto-vectorization are poor if the loop kernel contains code beyond basic arithmetic, e.g., conditional branches and transcendental function calls. Therefore, we choose to vectorize the outer loop over all points in the mesh in batches of size nlanes and then solve the microstructure ODEs on a batch of points stored in the different lanes. The different quantities on a batch of points are loaded into the VectorizedArray data structure. This approach results in an array-of-struct-of-array layout, with the inner array being a VectorizedArray, which allows a concise implementation without explicitly writing the inner-most vectorized loop. However, the numerous conditional branches in the microstructure model do not always allow the same operation to be performed on all lanes. From an implementation standpoint, three distinct scenarios for the conditional branches of equations can be distinguished: 1. All vector lanes require evaluation of an expression. In this case, the expression is evaluated for all vector lanes using intrinsic functions. 8 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing nlanes load 5 vectors store 4 vectors some results per branch blended result all none condition mask update in place local working copy conditional evauation time integration + subcycling + ﬁxed-point iteration Microstructure algorithm Xas Xam Xb Tn Tn+1 Figure 2: Illustration of vectorized microstructure algorithm. The algorithm works simultaneously on a local working copy of nlanes entries of the five global data vectors. Time integration, fixed-point iteration, and (optional) subcycling are all performed locally. All conditional computations are performed by blending the results of different conditional branches based on the condition mask. 2. None of the vector lanes require evaluation of an expression. In this case, the expression is not evaluated. 3. Some but not all of the vector lanes require the evaluation of an expression. In this case, the expression is evaluated for all vector lanes, but the result is only stored in some vector lanes that require it. Note that the unused additional computations do often not impact the evaluation time compared to an unvectorized implementation.3 A condition mask is computed for every branch to see which of the three scenarios is active. In the third case, the results of different branches are combined by blending the results with the condition mask. The general strategy is also visualized in Figure 2. The strategy outlined above only makes sense when an efficient vectorized implementation of every required (mathemat- ical) function is available. Although it is possible to fall back to compute expressions on the vector lanes sequentially, doing this in the scenario of mixed operations can, in the worst case, lead to an increase in computation time on the order of O (nlanes) compared to an unvectorized implementation4. Algorithm 1 outlines the overall vectorized solution procedure for the microstructure model. Starting from the solution variables, Xn αs, Xn αm, Xn β and T n, at the previous time tn, the solution after a time increment ∆t with temperature T n+1 is sought. We load a contiguous data slice from these five global vectors into vectorized arrays. Time integration is then performed on the vectorized arrays. Afterward, the results at time tn+1 are written back from the vectorized arrays into the respective global vectors. Note that the update of the temperature vector T n+1 ← T n is also performed in this loop since the data is already loaded. Five load and four store operations must be performed for every evaluation point, totaling 72 bytes of memory transfer per evaluation point or 24 bytes per DoF (3 DoFs per evaluation point). The explicit time stepping is outlined in Algorithm 2. The function compute rates evaluates the diffusion-based rates (25) – (27), and the function instantaneuous corrections evaluates instantaneous transformations between αm- and β-phase. Only a few arithmetic operations are needed for every set of vectorized arrays. In contrast, the implicit solution procedure shown in Algorithm 3 usually requires fixed-point iteration and, thus, at least twice as 3Note that wider vectors might lead to slightly lower clock frequencies on some hardware and complicated functions, like divisions or square roots, might have lower throughput when executed on wider vectors; nonetheless, the overwhelming share of operations has the same throughput for 1 or nlanes results. 4If every lane requires a different kind of operation, O (nlanes) operations are necessary in the unvectorized case. However, when the computation is vectorized and every kind of operation is unnecessarily performed on all lanes, O \u0000n2 lanes \u0001 operations are necessary. 9 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing Algorithm 1: Time integration of microstructure model with vectorized data. Data: ∆t, Global vectors Xn αs, Xn αm, Xn β , T n, T n+1 Result: Global vectors Xn+1 αs , Xn+1 αm , Xn+1 β , T n+1 i ← 0 while i < size(T n) do // Load into vectorized array ˇXn αs ← Xn αs[i : i + nlanes] ˇXn αm ← Xn αm[i : i + nlanes] ˇXn β ← Xn β [i : i + nlanes] ˇT n ← T n[i : i + nlanes] ˇT n+1 ← T n+1[i : i + nlanes] // Solve local time integration problem ˇXn+1 αs , ˇXn+1 αm , ˇXn+1 β ← time integration( ˇXn αs, ˇXn αm, ˇXn β , ˇT n, ˇT n+1, ∆t) // Store from vectorized array Xn+1 αs [i : i + nlanes] ← ˇXn+1 αs Xn+1 αm [i : i + nlanes] ← ˇXn+1 αm Xn+1 β [i : i + nlanes] ← ˇXn+1 β T n+1[i : i + nlanes] ← ˇT n i ← i + v end Algorithm 2: Local explicit time integration of microstructure model on vectorized data. Data: ˇmn = [ ˇXn αs, ˇXn αm], ˇXn β , ˇT n, ∆t Result: ˇXn+1 αs , ˇXn+1 αm , ˇXn+1 β ˙ˇmn ← compute rates( ˇmn, ˇT n) ˇmn+1 ← ˇmn + ∆t ˙ˇm ˇmn+1, ˇXn+1 β ← instantaneous corrections( ˇmn+1, ˇXn β , ˇT n) Algorithm 3: Local implicit time integration of microstructure model on vectorized data. Data: ˇmn = [ ˇXn αs, ˇXn αm], ˇXn β , ˇT n, ˇT n+1, ∆t Result: ˇXn+1 αs , ˇXn+1 αm , ˇXn+1 β ˙ˇmn ← compute rates( ˇmn, ˇT n) ˇmn+1 0 , ˇXn+1 β,0 ← instantaneous corrections( ˇmn, ˇXn β , ˇT n+1) ˙ˇmn+1 0 ← compute rates( ˇmn+1 0 , ˇT n+1) i ← 0 repeat ˇmn+1 i+1 ← ˇmn + ∆t 2 ( ˙ˇmn+1 i + ˙ˇmn) ˇmn+1 i+1 , ˇXn+1 β,i+1 ←instantaneous corrections( ˇmn+1 i+1 , ˇXn+1 β,i , ˇT n+1) ˙ˇmn+1 i+1 ← compute rates( ˇmn+1 i+1 , ˇT n+1) e ← weighted root mean square( ∆t 2 ( ˙ˇmn+1 i+1 − ˙ˇmn+1 i )) i ← i + 1 until e < 1.0 10 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing many arithmetic operations as the explicit step. However, the amount of loaded and stored data is equal. As we will demonstrate in the examples, this typically leads to the explicit time integration scheme being memory-bound and the implicit scheme being compute-bound. 3.3 Efficient approximation of transcendental functions The evolution equations of the microstructure model contain a few terms that necessitate the computation of a (non- integer) power or exponential function. Note that the power of a positive number can equivalently be written as ax = exp(x ln a), a > 0, (44) which allows to compute the power of a number via a natural logarithm and an exponential function. At the time of writing, the C++ standard did not offer an implementation of these functions that could leverage SIMD hardware support. While copying and adapting the sophisticated implementations from the standard library or wrapping an existing library supporting vectorized data types would, in theory, be possible, we want to follow a different strategy here. The C++ standard implementation and most other libraries [31] must deal with a wide range of applications and consequently are implemented to be accurate up to machine precision. However, in the context of a numerical method, we accept a much less accurate result than machine precision. The chosen strategy embeds this fact by allowing the definition of an approximation that is accurate enough while minimizing the number of arithmetic operations. The strategy employed in this work assumes the ubiquitous IEEE-754 standard [3] to represent floating point numbers. In this standard, a real number is represented as (−1)s2p−b(1 + m). (45) For a 64-bit representation, i.e., the double data type in C/C++, the bias is set to b = 1023, the sign s consumes a single bit, the exponent p (an integer) consumes 11 bit, and the mantissa m (a binary fraction) consumes 52 bit. The idea of directly computing and manipulating the bitwise representation was initially brought up in [30]. Here, we follow the refined implementation discussed in [18, 24]. Let us first find an approximation to the exponential function zexp by rewriting, zexp := exp(x) = 2x log2(e) = 2y = 2yi2yf , (46) where yi = ⌊x log2(e)⌋ is an integer5, and yf = x log2(e) − yi ∈ [0, 1) is a rational number. By comparing (46) to (45), we find that s = 0, (47) 2yi = 2p−b, (48) 2yf = 1 + m. (49) The sign bit is always zero, as expected for exponentiation. The exponent p can directly be computed from (48) as p = yi + b. (50) By rearranging (49) and introducing a correction function Kexp(yf), we write: 2yf = 1 + m = 1 + yf − Kexp(yf), with Kexp(yf) = 1 + yf − 2yf , (51) which leads to the mantissa m = yf − Kexp(yf). (52) The correction function Kexp(yf) is replaced with a polynomial approximation to circumvent the need to compute a (non- integer) power of 2. Note that this is the only approximation that is performed for the computation of the exponential function. The polynomial approximation can be tailored to the required accuracy by polynomial interpolation or regression. In this contribution, we use a least-squares fit of a polynomial of degree 7 to data sampled on 1000 equidistant points in [0, 1). The resulting coefficients are listed in Table 4. Tests revealed that adding more sample points does not increase the accuracy of the approximation in a relevant manner for our application. In contrast to [24], we do not consider the derivatives of Kexp(yf) in the computation of the coefficients as we found their impact negligible. Since we determined the sign bit s = 0, the exact exponent p = yi+b, and the approximate mantissa m = yf −Kexp(yf) of zexp in (46), all that remains to be done is filling their bitwise representations into the IEEE754 conforming layout. 5The floor function ⌊x⌋ returns the largest integer not exceeding x. 11 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing Table 4: Polynomial coefficients for the approximated correction functions Kexp(yf) and Kln(yf). i ai in Kexp(yf) = Pn i=0 aiyi f bi in Kln(yf) = Pn i=0 biyi f 0 1.213 071 811 889 × 10−10 1.847 756 720 962 93 × 10−10 1 3.068 528 102 657 × 10−1 1.442 695 040 841 32 2 −2.402 263 423 993 59 × 10−1 −0.721 347 520 143 005 3 −5.550 533 134 149 54 × 10−2 0.480 898 345 526 187 4 −9.613 524 328 848 3 × 10−3 −0.360 675 000 332 004 5 −1.342 884 759 630 84 × 10−3 0.288 048 466 919 235 6 −1.431 317 444 835 89 × 10−4 −0.235 306 287 368 882 7 −2.159 565 612 634 9 × 10−5 0.183 102 904 829 435 8 −0.120 996 268 979 3 9 0.059 150 381 159 211 3 10 −0.018 114 949 248 998 9 11 0.002 544 886 756 057 43 64-bit int 64-bit double reinterpret bitwise representation convert to equivalent 64-bit int ×252 0 64-bit int 64-bit int 64-bit double 64-bit double 64-bit double exponent p: integer mantissa m: rational number in [0,1) pm 0 0 0 0 0 ... 0 ... 0 0 0 pm+52 0 p m bit mask 0 0 bit mask add add ×2-52 convert to equivalent ×252 ×2-52 ... Figure 3: Following the arrows from top to bottom illustrates how to synthesize an IEEE754 double representation from a separate exponent p (blue) and mantissa m (red). Following the arrows from bottom to top shows the inverse operation, namely a decomposition of a double representation into exponent and mantissa. An elegant way to achieve this can be derived by filling a 64-bit integer (int64) with the values of s, p, and m and then interpreting the result as a (64-bit) double value. A graphical depiction of the approach is shown in Figure 3. The exponent p – an integer stored inside a double representation – is converted into the equivalent int64 format and then multiplied with 252, shifting it 52 bits to the left. Multiplying the mantissa m < 1 by 252 shifts the decimal point behind the last (binary) digit, thus making it an integer, which is then converted into the equivalent int64 format. In C++, the conversion from double to int64 is achieved by a static cast<int64> operation. The two int64 numbers derived from p and m have no overlapping non-zero bits. They are added together to yield a combined int64 with the bitwise representation of zexp when reinterpreted as a double number( using reinterpret cast<double> in C++). Programmatically speaking, this algorithm can be written as: zexp ← reinterpret cast<double>(252 × static cast<int64>(p) + static cast<int64>(252 × m)) (53) For an integer stored inside a double representation, we may flip the ordering of multiplication with another integer and a static cast<int64> to integer format. Thus, we can rewrite (53) as, zexp ← reinterpret cast<double>(static cast<int64>(252 × (p + m))), (54) and with (50) and (52) after rearranging as y ← x log2(e) (55) yf ← y − ⌊y⌋ (56) zexp ← reinterpret cast<double>(static cast<int64>(A × (y − Kexp(yf)) + B)) (57) 12 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing The coefficients A = 252, B = 252 · 1023 and log2(e) can be precomputed. The operations required in (55)–(57) are multiplication, addition, flooring, and type conversions. All of these are typically available in an instruction set for vector extensions. Thus, it is straightforward to implement (55)–(57) using SIMD in a given instruction set architecture. The same ideas can be applied to derive a fast, vectorized approximation of the natural logarithm ln(x). We perform a change of basis and insert the IEEE754 double representation (45) to obtain: zln = ln(x) = ln(2) log2(x) = ln(2) log2 \u0002 2p−b(1 + m) \u0003 = ln(2)[(p − b) | {z } li + log2(1 + m) | {z } lf ]. (58) Again, we identify an integer part li and a fractional part lf. The integer part li is the exponent in the double representation of x. The fractional part lf is once more replaced by a correction function Kln(m) ≈ log2(1 + m) which takes the mantissa m of x as an argument. The exact form is replaced with an approximated polynomial of degree 10 determined via a least-squares fit of 1000 sample points in the relevant interval m ∈ [0, 1). The coefficients are given in Table 4. The exponent p − b and the mantissa m are extracted from x by bit manipulations. Note that these operations are the inverse of the operations performed to synthesize a double, as shown in Figure 3 when following the arrows from the bottom to the top. Again, (58) is straightforward to implement with SIMD instructions. To evaluate polynomials Kexp of degree 7 and Kln of degree 10, we make use of Estrin’s scheme [10]. Although this scheme requires more floating point operations than the classical Horner scheme, it is better suited for the two separate fused multiply-add (FMA) units typically available on modern hardware since it allows independent computation of terms, thus shortening dependency chains. Applying this technique to the polynomial approximation of the correction function Kexp yields, Kexp(yf) = (((a7yf + a6)y2 f + (a5yf + a4))y4 f + ((a3yf + a2)y2 f + (a1yf + a0))), (59) where pairs of parentheses group expressions that can be computed by an FMA instruction. 4 Numerical experiments The experiments are run on compute nodes consisting of two Intel Xeon Gold 6230 CPUs (total of 40 cores per compute node) running at 2.1 GHz with a measured peak performance of 2.5 TFlops/s and a DAXPY memory bandwidth of 162 GB s−1. The DAXPY benchmark updates a vector y in place according to y ← y + αx, which, from a memory access perspective, is close to the microstructure model. A second setup consists of compute nodes with two AMD EPYC 9354 CPUs (total of 64 cores per compute node) running at 3.25 GHz with a measured peak performance of 3.75 TFlops/s and a DAXPY memory bandwidth of 617 GB s−1. All performance measurements are conducted and analyzed with the LIKWID suite [32]. 4.1 Performance analysis As a first numerical study, we investigate the microstructural model implementation in isolation. A significant challenge for a vectorized implementation of the microstructure equations lies in the conditional branches. As outlined above, we rely on the fact that spatially close material points (in the physical domain) likely need the same treatment. Such points are often located next to each other in a global vector of unknowns arising from spatial discretization. Three different synthetic sets of test data are used. The first test layout consists of alternating data, so neighboring entries in global vectors require different conditional branches in the microstructure model. The second consists of contiguous blocks of 10 entries, and the third consists of contiguous blocks of 100 entries. The throughput, defined as the number of DoFs divided by the solution time, is shown for these three block sizes and the explicit and implicit time integration scheme in Figure 4. Most importantly, the throughput increases for all block sizes when increasing the vectorization width. This holds for explicit and implicit time integration schemes. This behavior is achieved by implementing the expensive exponential and power functions to exploit SIMD instructions. Without this implementation, one would observe increased computation times and lower throughput for high vectorization widths at small block sizes. Due to unavoidable conditional computations in the case of block size 1, the performance improvement when increasing the vectorization width cannot scale perfectly here. For the Intel hardware, the flattening of the curve above 6 GDoF/s is in good agreement with the maximum theoretically possible throughput of (162 GByte/s)/(24 Byte/DoF) = 6.75 GDoF/s for a fully memory-bound code. Figure 5 shows a roofline plot of the tested data layouts. For increasing vectorization width, data points move upwards and thus closer to the hardware limits. The explicit scheme quickly saturates the maximum memory bandwidth for larger block sizes. This explains why no speedup is visible when increasing the vectorization width from four to eight in Figure 4: the implementation is memory-bound, and higher vectorization widths cannot speed up the computation 13 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing 1 2 4 8 vectorization width [-] 109 1010 throughput [DoFs/s] Intel Xeon Gold 6230 explicit, block size 1 explicit, block size 10 explicit, block size 100 implicit, block size 1 implicit, block size 10 implicit, block size 100 1 2 4 8 vectorization width [-] 1010 throughput [DoFs/s] AMD EPYC 9354 explicit, block size 1 explicit, block size 10 explicit, block size 100 implicit, block size 1 implicit, block size 10 implicit, block size 100 Figure 4: Impact of vectorization width on throughput of the microstructure model solved with an explicit or implicit scheme on Intel and AMD hardware. 100 101 arithmetic intensity [FLOPS/byte] 1011 1012 performance [FLOPS/s] peak instruction mix w/o vectorization DAXPY memory bandwidth 162 GB/s Intel Xeon Gold 6230 explicit, block size 1 explicit, block size 10 explicit, block size 100 implicit, block size 1 implicit, block size 10 implicit, block size 100 100 101 arithmetic intensity [FLOPS/byte] 1011 1012 performance [FLOPS/s] peak instruction mix w/o vectorization DAXPY memory bandwidth 617 GB/s AMD EPYC 9354 explicit, block size 1 explicit, block size 10 explicit, block size 100 implicit, block size 1 implicit, block size 10 implicit, block size 100 Figure 5: Roofline plot of a single time step performed in the microstructure model with an explicit or implicit scheme at different data block sizes. Data points move upwards along the dashed lines for increasing vectorization widths. if memory transfer is the bottleneck. An improvement can only be expected if data transfer is minimized further or more work is performed for loaded data. One way to achieve this is subcycling, which performs multiple time steps on the same loaded data in place and only stores the result of the last subcycle. However, in a practical setting, the microstructure model already outperforms the thermal model by a significant factor, so further optimization in that direction is not investigated here. For block size 1, we observe a growing arithmetic intensity for increasing vectorization width. In this case, multiple branches must be computed in all lanes, although the result is only stored in some lanes. For larger block sizes, it becomes less likely to require different branch evaluations on a vectorized array, and thus, the number of (unproductive) arithmetic operations decreases. Furthermore, we analyzed the generated machine code for the implicit scheme with the machine code analyzer of the LLVM project [2]. Analyzing the instruction mix reveals that the achievable performance is limited by dependency chains and expensive instructions that occupy the same execution ports as the productive floating point operations. In particular, executing the necessary instructions to compute diffusion from β to αs phase without any branching or load/store instructions reveals that only 43% of the work performed on the two relevant execution ports of the Intel hardware contributes to the floating point operation metric. For the AMD hardware, the equivalent factor is 57%. Therefore, we introduce an application-specific roofline into the roofline plots, where the (unrealistic) peak performance 14 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing Table 5: Processing parameters of cube example. Parameter Description Value Unit vscan Laser scan speed 960 mm s−1 dh Hatch spacing 0.08 mm Weff Effective laser power 180 W R Laser beam radius 0.06 mm hp Powder layer thickness 0.05 mm layer 190 layer 195 layer 200 ﬁnal cool down temperature [K] phase fraction αs [-] phase fraction αm [-] phase fraction β [-] x z Figure 6: Phase fractions and residual temperature after processing and cooling of layers 190, 195, 200, and after a final cool down of the cube geometry. Results are depicted in a slice at y = 5 mm and the base plate is cropped. is scaled down by the respective factor for the instruction mix. We achieve 58% of the instruction mix performance on Intel Gold hardware and 82% on AMD EPYC. 4.2 Cube geometry In this example, we simulate manufacturing a 1 × 1 × 1 cm3 cube from 200 powder layers with thickness 0.05 µm. The cube is placed on a base plate of dimensions 1.2 × 1.2 × 1 cm3. The processing parameters are summarized in Table 5. A time step size of ∆tactive = 2 × 10−5 s is used in the active laser phase and after every layer, a cool down phase of 1 s is simulated. The first 2,000 steps of this phase are simulated with the same time step size as the active phase. Afterward, the macroscopic time step size is doubled after every ten time steps for the thermal model up to a 15 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing αs αm x y 1 2 3 4 scan strategy 1 cm 1 cm Figure 7: Final phase fraction of stable αs and martensite αm for cube example in a horizontal slice at z = 8 cm. Two different scan strategies are used to manufacture the cube: the first row shows the results for a continuous serpentine track extending over the cross-section. The second row shows the results for a scan path split into four islands, each containing a serpentine track. Figure 8: Final phase fraction of martensite αm for cube example with single island scan track. An octant is cut out to show the asymmetric distribution of martensite induced by the asymmetric scan track. An adaptively refined mesh captures the built geometry. 16 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing 40 80 160 320 # cores 10 4 10 3 average time per step [s] ideal 40 80 160 320 # cores 107 108 throughput [dofs/s/core] 40 80 160 320 # cores 0.6 0.7 0.8 0.9 1.0 parallel efficiency [-] Active phase layer 1; 388,987 dofs layer 20; 537,107 dofs layer 100; 854,456 dofs layer 200; 1,256,594 dofs Microstructure Thermal 40 80 160 320 # cores 10 2 10 1 100 average time per step [s] ideal 40 80 160 320 # cores 105 106 throughput [dofs/s/core] 40 80 160 320 # cores 0.6 0.7 0.8 0.9 1.0 parallel efficiency [-] Cool down phase layer 1; 388,987 dofs layer 20; 537,107 dofs layer 100; 854,456 dofs layer 200; 1,256,594 dofs Microstructure Thermal Figure 9: Strong scaling study of cuboid example with adaptive mesh coarsening. The first row shows the average solution time per step, the throughput, and the parallel efficiency in the active laser phase; the second row shows the same metrics in the cool down phase. Note that the reported time per step includes subcycling for the microstructure model in the later cool down steps. The number of DoFs is given for the thermal problem; the microstructure problem carries three times this number. maximum step size of 0.1 s. The microstructure model uses the identical time step size as the thermal model if the step size is less than or equal to 1 × 10−2 s and, otherwise, uses the subcycling technique described earlier. After processing the last layer, the geometry is cooled to room temperature over 100 s. As a first example, every layer is processed as a single island consisting of a continuous serpentine track, where the laser beam moves in y-direction and hatching proceeds in x-direction. The three phases and the residual temperature after layers 190, 195, and 200 are processed are shown in Figure 6. A noticeable asymmetry can be seen in the higher layers, where the accumulated heat produces a. Due to the long and continuous serpentine track, heat accumulates as the track hatches progress in positive x-direction, leading to lower cooling rates and decreased martensite formation and, instead more stable αs phase formation in layers 170 to 190. This happens because the residual temperature only falls slightly below the martensite start temperature in higher layers. The material is held at elevated temperatures, giving enough time for the diffusion-driven formation of stable αs-phase. Due to the time required for a significant formation of αs-phase, the formation happens a few layers below the currently processed layer. Note that the final cool down stage is essential to obtain the actual phase composition close to room temperature. During this stage, the already formed stable αs-phase remains. In the highest layers, the cooling rate is now large enough because no heat is added above layer 200. Consequently, most of the β-phase remaining after processing of layer 200 transforms into αm-phase b. At room temperature, the β-phase fraction reaches its equilibrium value of 10%. The cube test geometry is well-suited to study the effects of different scan strategies on the resulting microstructural composition. In addition to the single island scan track consisting of a continuous serpentine track, we investigate a scan track split into four disjoint islands, each consisting of a serpentine track. The tracks are shown in Figure 7 along with the stable αs- and martensite αm-phase fractions after the final cool down in a horizontal slice at z = 8 cm. A strong asymmetry is visible in the in-plane distribution of the αs- and αm-phase fractions for the single-island scan strategy. On the other hand, the four-island scan strategy produces a more homogeneous distribution with a higher average martensite fraction than the single-island scan. The different phase distribution is caused exclusively by the scan strategy, as all other parameters are identical. This observation again shows the need for scan-resolved models, such as the one presented in this work. For a better idea of the different scales involved in a resolved part-scale simulation, a view of the adaptive mesh is shown in Figure 8. The smallest cells’ heights correspond to one powder layer thickness. To capture the geometry, the mesh is more refined close to the cube’s surface. One could employ a boundary-fitted mesh for this simple geometry to save DoFs, as done in our previous work [25]. 17 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing Table 6: Processing parameters of cantilever example. Parameter Description Value Unit vscan Laser scan speed 960 mm s−1 dh (Approximate) hatch spacing 0.11 mm Weff Effective laser power 180 W R Laser beam radius 0.06 mm hp Powder layer thickness 0.04 mm build direction x z y 75 mm 5 mm 12.48 mm hollow leg with thin walls 45 degree overhang 312 layers of 0.04 mm thickness Total track length 853m Figure 10: NIST AMBench 2022 cantilever geometry. Finally, we also want to judge the performance of our implementation in this more practical example. The scenario with the single-island scan strategy is simulated in a strong scaling study on 1, 2, 4, and 8 nodes of the Intel Gold hardware mentioned in the introduction to this section connected by an Infiniband FDR (56 Gbit/s) interconnect. The resulting average time per time step, throughput, and parallel efficiency are shown in Figure 9 for the thermal and microstructure models separately. Here, parallel efficiency is defined as: parallel efficiency = reference compute time × reference number of cores scaled compute time × scaled number of cores (60) Overall, the explicit and implicit solution of the microstructure equations requires around 10% of the time of the respective thermal model. Note that the microstructure problem carries three times the number of DoFs as the thermal problem; thus, the throughput is further increased compared to the thermal problem. The microstructure implementation exhibits excellent parallel scalability, even in the first layer. This result is to be expected since no communication between processes is involved. The total wall time when running the example on eight Intel Gold nodes is 2.32 h. 4.3 Cantilever As a last example, we investigate the well-known NIST AMBench cantilever geometry [16]. The geometry, shown in Figure 10, features thin-walled legs and overhang regions, leading to different local cooling rates. The geometry is built on a 10.56 mm high base plate section. To investigate the effect of different pre-heating temperatures, the bottom of the base plate is constrained to a fixed temperature ˆT ∈ {293 K, 500 K, 550 K, 600 K}. The scan strategy is directly taken from [16]. The active scan phase in every layer is followed by a cool down phase of 1s, which uses identical time step sizes as described for the cube example. After simulating all 312 layers, a final cool down of 100 s is simulated, during which the temperature on the bottom of the baseplate is set to 293 K room temperature. The scan parameters are given in Table 6. The case of ˆT = 293K leads to a fully martensitic microstructure and is not shown in more detail. Instead, we focus on the results for higher pre-heating temperatures. Figure 11 shows the phase fractions and residual temperatures at various points in time for a pre-heating temperature ˆT = 600 K. In the overhang regions and above the legs, a substantial 18 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing temperature [K] phase fraction αs [-] phase fraction αm [-] phase fraction β [-] layer 312 after ﬁnal cool down layer 188 layer 234 x z Figure 11: Phase fractions and residual temperature after processing and cooling of layers 188, 234, and 312 (including final cool down time). Results are depicted in the symmetry xz-plane of the cantilever geometry. phase fraction αs [-] layer 200 pre-heating temperature layer 188 600K 550K 500K Figure 12: Detailed view of αs-phase fractions for different preheating temperatures after processing and cooling of layers 188 and 200. Results are depicted in the symmetry xz-plane of the cantilever geometry near the hollow leg structure. 19 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing thermo 89% microstructure 11% relative time active active 86% cool down 11% other 2% total time thermo 98% microstructure 2% relative time cool down Figure 13: Distribution of total solution time over different parts of the solution procedure. amount of αs-phase forms over time due to the reduced cooling provided by the thin-walled legs. Again, the phase fraction αs increases visibly a few layers after initial processing. It keeps growing until reaching 90% stable αs-phase, the equilibrium value. The highest layers are not held at an elevated temperature for a sufficient time, so almost no αs-phase forms here and the microstructure is fully martensitic after the final cooling step. While we varied the scan pattern in the last example, we now vary the pre-heating temperature and show the evolution of αs-phase for ˆT ∈ {500 K, 550 K, 600 K} in Figure 12. The final microstructure composition is sensitive to the pre-heating temperature, the scan track, and the interlayer cool down time. The full simulation of the case with ˆT = 293 K takes 52.3 h on four AMD Epyc nodes. Figure 13 breaks down the total solution time into active and cool down phase and the thermal and microstructure problem. Due to the high degree of optimization of the microstructure implementation, the coupled thermo-microstructure problem is obtained at only marginally increased computation time compared to the thermal problem alone. 5 Conclusion We presented a highly efficient implementation of a coupled thermal-microstructure model. The proposed approach enables simulations on the scale of real parts with a scan-track resolved heat source. As demonstrated in the examples, considering the actual scan track is vital to capture variations in the microstructural composition caused by the scan strategy rather than the geometry. Simulations with hundreds of layers are possible in a few hours to a few days, depending on the build volume. While the investigated geometries are of a relevant scale, the presented methodology may be combined with layer-wise heating approaches in areas where this simplification is applicable to tackle scales beyond decimeters in future research. The microstructure model equations contain conditional branches and computationally expensive mathematical functions. Through special approximations and a careful data layout, the proposed methodology can utilize modern hardware capabilities efficiently. The evaluation of the thermo-microstructure model comes with less than a 10% increase in run time compared to the thermal model. In future investigations, the current model may be refined to include homogenized information on the anisotropic orientation of grains induced by the thermal gradients. The model can then serve as the basis for microstructure-informed solid mechanics simulations. Acknowledgements The authors thank Maximilian Bergbauer for valuable discussions about performance modeling. Furthermore, the authors thank Neil Hodge, Jonas Nitzler, and Nils Much for their initial work on the microstructure model. 20 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing A Analytical solution for initiating diffusion-based transformations When initiating the diffusion process αs → β from an initial state Xαs = 0.9, Xβ = 0.1, the rate form (27) cannot be used in combination with an explicit scheme since it always yields zero for the initial values. Instead, an approximate solution is used for the initial time steps when diffusion starts. The Crank-Nicolson integration scheme with a fixed point iteration would not face this issue if one were to perturb the initial guess. However, for a unified implementation, the analytical solution is also used to initiate diffusion when using the Crank-Nicolson scheme. To derive the approximate analytical solution, we rewrite (27), with the help of (14) and the relations Xeq β = 1 − Xeq α and ˜Xβ := Xβ − 0.1 as ˙Xβ = kβ(T)(0.9 − Xα) cβ −1 cβ (Xα − Xeq α ) cβ +1 cβ = kβ(T)( ˜Xβ) cβ −1 cβ (Xeq β − 0.1 − ˜Xβ) cβ +1 cβ . (61) We perform the substitution ξ := ˜Xβ/(Xeq β − 0.1) and obtain ˙ξ = (Xeq | β − 0.1)kβ(T) {z } ˜k (ξ) cβ −1 cβ (1 − ξ) cβ +1 cβ , (62) which, assuming that ˜k = const., has a known solution given in [5]. For an initial value ξn at tn, the solution in the next step tn + ∆t can be found as: ˜Xn+1 β = (Xeq β − 0.1)  1 +    cβ (Xeq β − 0.1)kβ(T)∆t + cβ \u0010 ξn 1−ξn \u0011 1 cβ    cβ  −1 (63) For numerical reasons, this solution is computed using a shifted fraction ˜Xβ, which has an equilibrium value of zero at room temperature. Due to the careful formulation of (63), it is possible to accurately work on a small number below machine precision ε(1) ≈ 1 × 10−16 without losing precision by adding to a numeric value on the order of 1. The analytical solution (63) is evaluated in subsequent time steps until ˜Xn+1 β ∆t > 1 × 10−15 which is an approximation for the decrement in αs-fraction according to (27). This criterion ensures a sufficient change is noticeable in the α-fraction and allows to continue the evolution with (27). While using the approximate analytical solution, the fraction ˜Xβ is tracked independently and not computed from the continuity constraint (32). The applicability of this strategy has been verified for a constant temperature T = 1200 K as shown in Figure 14. The analytical approximation (63) is exact in the case of a constant temperature. An analytical approximation for the initial diffusion step from β → αs has already been discussed in [23]. In this case, the values obtained from the analytical expression are large enough and significant digits are not absorbed. References [1] C++ SIMD library. https://en.cppreference.com/w/cpp/experimental/simd. Accessed: 2024-02-06. [2] llvm-mca – LLVM Machine Code Analyzer. https://llvm.org/docs/CommandGuide/llvm-mca.html. Accessed: 2024-02-26. [3] IEEE standard for floating-point arithmetic. IEEE Std 754-2019 (Revision of IEEE 754-2008), pages 1–84, 2019. [4] D. Arndt, W. Bangerth, M. Bergbauer, M. Feder, M. Fehling, J. Heinz, T. Heister, L. Heltai, M. Kronbichler, M. Maier, et al. The deal. ii library, version 9.5. Journal of Numerical Mathematics, 31(3):231–246, 2023. [5] I. Avramov and J. ˇSest´ak. Generalized kinetics of overall phase transition explicit to crystallization. Journal of Thermal Analysis and Calorimetry, 118:1715–1720, 2014. [6] J. Berry, A. Perron, J.-L. Fattebert, J. D. Roehling, B. Vrancken, T. T. Roehling, D. L. Rosas, J. A. Turner, S. A. Khairallah, J. T. McKeown, et al. Toward multiscale simulations of tailored microstructure formation in metal additive manufacturing. Materials Today, 51:65–86, 2021. 21 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing 0 5 10 15 20 25 30 t [s] 0.1 0.2 0.3 0.4 0.5 0.6 X  [-] 19.2 19.4 19.6 0.340 0.345 0.350 0.355 0.360 analytical explicit Crank-Nicolson Figure 14: Comparison of analytical solution for transformation β → αs to explicit and Crank-Nicolson time integration. The solution is computed for a constant temperature T = 1200 K and initial values Xαs = 0.9 and Xβ = 0.1. [7] Q. Chen, N. Ma, K. Wu, and Y. Wang. Quantitative phase field modeling of diffusion-controlled precipitate growth and dissolution in ti–al–v. Scripta Materialia, 50(4):471–476, 2004. [8] A. Crespo. Modelling of heat transfer and phase transformations in the rapid manufacturing of titanium components. InTech, 2011. [9] R. Ding and Z. Guo. Microstructural evolution of a ti–6al–4v alloy during β-phase processing: experimental and simulative investigations. Materials Science and Engineering: A, 365(1-2):172–179, 2004. [10] G. Estrin. Organization of computer systems: the fixed plus variable structure computer. In Papers presented at the May 3-5, 1960, western joint IRE-AIEE-ACM computer conference, pages 33–40, 1960. [11] A. Fog. VCL – C++ vector class library manual. https://raw.githubusercontent.com/vectorclass/ manual/master/vcl_manual.pdf. Accessed: 2024-02-06. [12] D. Furrer and S. Semiatin. Introduction to fundamentals of modeling for metals processing. 2009. [13] X. Gong and K. Chou. Phase-field modeling of microstructure evolution in electron beam additive manufacturing. Jom, 67:1176–1182, 2015. [14] J. Koepf, D. Soldner, M. Ramsperger, J. Mergheim, M. Markl, and C. K¨orner. Numerical microstructure prediction by a coupled finite element cellular automaton model for selective electron beam melting. Computational Materials Science, 162:148–155, 2019. [15] M. Kronbichler and K. Kormann. A generic interface for parallel cell-based finite element operator application. Computers & Fluids, 63:135–147, 2012. [16] B. Lane, L. Levine, D. Deisenroth, H. Yeung, V. Tondare, S. Mekhontsev, and J. Neira. AM Bench 2022 3D Build Modeling Challenge Description Data (AMB2022-01). Technical report, National Institute of Standards and Technology, 2022. [17] L. Lindgren, A. Lundb¨ack, M. Fisk, R. Pederson, and J. Andersson. Simulation of additive manufacturing using coupled constitutive and microstructure models. Additive Manufacturing, 12:144–158, 2016. [18] A. C. I. Malossi, Y. Ineichen, C. Bekas, and A. Curioni. Fast exponential computation on SIMD architectures. Proc. of HIPEAC-WAPCO, Amsterdam NL, 56, 2015. [19] C. Meier, R. W. Penny, Y. Zou, J. S. Gibbs, and A. J. Hart. Thermophysical phenomena in metal additive manufacturing by selective laser melting: fundamentals, modeling, simulation, and experimentation. Annual Review of Heat Transfer, 20, 2017. [20] J. Munk, E. Breitbarth, T. Siemer, N. Pirch, and C. H¨afner. Geometry effect on microstructure and mechanical properties in laser powder bed fusion of ti-6al-4v. Metals, 12(3):482, 2022. [21] C. C. Murgau, R. Pederson, and L.-E. Lindgren. A model for Ti–6Al–4V microstructure evolution for arbitrary temperature changes. Modelling and Simulation in Materials Science and Engineering, 20(5):055006, 2012. [22] P. Nie, O. Ojo, and Z. Li. Numerical modeling of microstructure evolution during laser additive manufacturing of a nickel-based superalloy. Acta Materialia, 77:85–95, 2014. 22 Highly efficient computational approach for part-scale microstructure predictions in Ti-6Al-4V additive manufacturing [23] J. Nitzler, C. Meier, K. W. M¨uller, W. A. Wall, and N. E. Hodge. A novel physics-based and data-supported microstructure model for part-scale simulation of laser powder bed fusion of Ti-6Al-4V. Advanced Modeling and Simulation in Engineering Sciences, 8(1):16, 2021. [24] F. Perini and R. D. Reitz. Fast approximations of exponential and logarithm functions combined with efficient storage/retrieval for combustion kinetics calculations. Combustion and Flame, 194:37–51, 2018. [25] S. D. Proell, P. Munch, M. Kronbichler, W. A. Wall, and C. Meier. A highly efficient computational approach for fast scan-resolved simulations of metal additive manufacturing processes on the scale of real parts. Additive Manufacturing, 79:103921, 2024. [26] P. Promoppatum, S.-C. Yao, P. C. Pistorius, A. D. Rollett, P. J. Coutts, F. Lia, and R. Martukanitz. Numerical modeling and experimental validation of thermal history and microstructure for additive manufacturing of an inconel 718 product. Progress in Additive Manufacturing, 3:15–32, 2018. [27] A. Rai, M. Markl, and C. K¨orner. A coupled Cellular Automaton–Lattice Boltzmann model for grain structure simulation during additive manufacturing. Computational Materials Science, 124:37–48, 2016. [28] M. Rolchigo, S. T. Reeve, B. Stump, G. L. Knapp, J. Coleman, A. Plotkowski, and J. Belak. Exaca: A performance portable exascale cellular automata application for alloy solidification modeling. Computational Materials Science, 214:111692, 2022. [29] E. Salsi, M. Chiumenti, and M. Cervera. Modeling of microstructure evolution of ti6al4v for additive manufactur- ing. Metals, 8(8):633, 2018. [30] N. N. Schraudolph. A fast, compact approximation of the exponential function. Neural Computation, 11(4):853– 862, 1999. [31] N. Shibata and F. Petrogalli. Sleef: A portable vectorized library of c standard mathematical functions. IEEE Transactions on Parallel and Distributed Systems, 31(6):1316–1327, 2019. [32] J. Treibig, G. Hager, and G. Wellein. Likwid: A lightweight performance-oriented tool suite for x86 multicore environments. In 2010 39th international conference on parallel processing workshops, pages 207–216. IEEE, 2010. [33] J. A. Turner, J. Belak, N. Barton, M. Bement, N. Carlson, R. Carson, S. DeWitt, J.-L. Fattebert, N. Hodge, Z. Jibben, et al. ExaAM: Metal additive manufacturing simulation at the fidelity of the microstructure. The International Journal of High Performance Computing Applications, 36(1):13–39, 2022. [34] J. Yang, H. Yu, J. Yin, M. Gao, Z. Wang, and X. Zeng. Formation and control of martensite in Ti-6Al-4V alloy produced by selective laser melting. Materials & Design, 108:308–318, 2016. [35] Q. Zhang, J. Xie, Z. Gao, T. London, D. Griffiths, and V. Oancea. A metallurgical phase transformation framework applied to slm additive manufacturing processes. Materials & Design, 166:107618, 2019. 23 "
}