{
    "optim": "Springer Nature 2021 LATEX template\nA heuristic for solving the irregular strip\npacking problem with quantum optimization\nPaul-Amaury Matt1∗and Marco Roth1\n1Department of Cyber Cognitive Intelligence (CCI), Fraunhofer\nInstitute for Manufacturing Engineering and Automation IPA,\nNobelstrasse 12, 70569 Stuttgart, Germany.\n*Corresponding author(s). E-mail(s):\npaul-amaury.matt@ipa.fraunhofer.de;\nContributing authors: marco.roth@ipa.fraunhofer.de;\nAbstract\nWe introduce a novel quantum computing heuristic for solving the\nirregular strip packing problem, a significant challenge in optimiz-\ning material usage across various industries. This problem involves\narranging a set of irregular polygonal pieces within a fixed-height,\nrectangular container to minimize waste. Traditional methods heavily\nrely on manual optimization by specialists, highlighting the complex-\nity and computational difficulty of achieving quasi-optimal layouts.\nThe proposed algorithm employs a quantum-inspired heuristic that\ndecomposes the strip packing problem into two sub-problems: order-\ning pieces via the traveling salesman problem and spatially arranging\nthem in a rectangle packing problem. This strategy facilitates a novel\napplication of quantum computing to industrial optimization, aim-\ning to minimize waste and enhance material efficiency. Experimental\nevaluations using both classical and quantum computational meth-\nods demonstrate the algorithm’s efficacy. We evaluate the algorithm’s\nperformance using the quantum approximate optimization algorithm\nand the quantum alternating operator ansatz, through simulations\nand real quantum computers, and compare it to classical approaches.\nKeywords: quantum computing, QAOA, quantum optimization, strip\npacking problem, Traveling Salesman Problem, irregular packing problem\n1\narXiv:2402.17542v1  [quant-ph]  27 Feb 2024\nSpringer Nature 2021 LATEX template\n2\nA heuristic the irregular strip packing problem\n1 Introduction\nThe irregular strip packing problem is a challenging and economically signif-\nicant issue that involves fitting a set of polygonal pieces into a fixed-height,\nrectangular container in a manner that minimizes unused space, or waste. This\ntask has broad implications, affecting industries ranging from fashion to au-\ntomotive and electronics, where efficient material use is crucial for both cost\nreduction and environmental sustainability. Traditional approaches often rely\non the expertise of specialists using CAD systems to achieve quasi-optimal\nlayouts, highlighting the problem’s complexity from both combinatorial and\ngeometric perspectives. The quality of the placements produced by these spe-\ncialist workers is high and according to [1], automatic solutions can only barely\nmatch this level of quality.\nIn this work, we introduce the Opus Incertum algorithm, a quantum com-\nputing (QC) heuristic designed to efficiently tackle the irregular strip packing\nproblem. While quantum optimization is a highly active field with applica-\ntions across a wide range of problems [2], purely geometric problems such as\nthe strip packing problem have received comparatively less attention in this\ndomain. To make the problem tractable for QC, we decompose it into two sub-\nproblems, a Traveling Salesman Problem (TSP) which shares similarities with\nthe strip packing problem in terms of computational difficulty and a rectangu-\nlar packing problem. The TSP can then be solved using QC algorithms such as\nthe Quantum Approximate Optimization Algorithm [3] and a variation thereof\ncalled Quantum Alternating Operator Ansatz [4]. Our method works towards\napplying QC to industrial optimization, offering a promising solution to the\nirregular strip packing problem by minimizing waste and optimizing material\nusage.\nThe remainder of the article is organised as follows. Section 2 is dedicated\nto related work. Section 3 formally introduces the mathematical formulation of\nthe problem. In Section 4, we introduce a QC-based heuristic. We then present\nin Section 5 the experimental results of our heuristic when executed on such\ncomputers with different methods available and compare the performance with\nexisting classical methods. We finally draw our conclusions in Section 6.\n2 Related Work\nA recent survey of mathematical models proposed in the last decades for nest-\ning problems can be found in [5]. The integer linear programming models of\n[6, 7] use a grid for the discrete positioning of pieces. The mixed-integer lin-\near programming models of [8–13] assume continuous positioning of the pieces\nin the container. [14] introduces a mixed-integer linear programming model\nwith semi-continuous positioning, i.e., continuous positioning on one axis and\ndiscrete positioning on the other. [15] is the first paper to tackle the problem\nof packing irregular shapes with unrestricted rotations. Other mathematical\nmodels that have been proposed are non-linear programming and constraint\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n3\nprogramming models. All these exact approaches which assume the pieces are\npolygons allow to find the optimal solution, but only work for small problems.\nOne of the main difficulties in solving the strip packing problem or other\nnesting problems is the necessity to represent the problem and perform geo-\nmetrical computations such as checking if pieces overlap or fit entirely inside\nthe container. [16] provides a survey of the geometric tools available. These\ninclude pixel/ raster methods [17–19], direct trigonometry and the D-function\n[20–23], the no-fit polygon [16, 22, 24–26] and phi-functions [27, 28].\nHeuristic methods have been designed in order to solve large instances\nof the irregular strip packing problem. An often used heuristic is the First\nFit Decreasing Algorithm [29], which consists of packing the pieces into bins\nin the order of decreasing size. The bottom-left heuristic proposed by [30]\nconsists of sequentially placing the pieces in as far as possible in the bottom-left\ncorner without overlapping them with those previously positioned. An initial\nsolution is usually obtained with the bottom-left heuristic and then improved\nvia heuristics, meta-heuristics and compact and separation models. According\nto [5], some of the best results are obtained with the methods of [31–36].\n[37] was the first to propose a quantum inspired algorithm for solving the\none-dimensional bin packing problem, where a set of items must be packed\ninto a minimum number of bins. [38, 39] proposed a quantum-classical hybrid\napproach to solve the one-dimensional bin packing problem using quantum\nannealing. [40] proposed an Ising model mapping to solve the two-dimensional\nregular packing problem, in which all pieces are assumed to have a rectangular\nshape. Using a quantum annealer, they were able to solve problem instances\nwith up to eighteen rectangles.\n3 The irregular strip packing problem\nThe irregular strip packing problem formally involves allocating a set of N\npieces P0, P1, . . . , PN−1 with polygonal shapes into a rectangular container\nC with a fixed height H and variable length L. The pieces must be placed\ncompletely inside the container in such a way that they do not overlap. The\npieces can be placed at any continuous location and can be freely oriented.\nThe objective is to minimize the length L of the container. Since all pieces\nmust be placed inside the container and the height is fixed, minimizing the\ncontainer length is equivalent to minimizing the unused area of the container,\ni.e., the surface that is unoccupied by the pieces. The unoccupied surface can\nbe interpreted as waste and the amount of waste can be quantified either by\nthe area W of that surface or by the ratio between W and the total area H ×L\nof the container. An example of a set with eight pieces is shown in Fig. 1(a).\nFrom a mathematical perspective, this problem as well as other irregular or\nregular packing problems, combine the combinatorial hardness of cutting and\npacking problems with the computational difficulty of enforcing the geometric\nnon-overlap and containment constraints. A quasi-optimal layout for this set\nSpringer Nature 2021 LATEX template\n4\nA heuristic the irregular strip packing problem\nof eight pieces in a container with fixed height which has been designed by\nhand is provided in Fig. 1(b).\n(a)\n(b)\nFigure 1: (a) Set of eight pieces to pack. (b) Example of a hand-designed\nplacement of the eight pieces.\n4 The Opus Incertum Algorithm\nMathematical models proposed in the literature are solved monolithically, i.e.,\nwithout use of decomposition methods thereby limiting the size of the problems\nthat can be solved. Regular packing (i.e. packing rectangular-shaped pieces)\nis an exception and constitutes a much simpler problem which can be solved\nefficiently. To make use of this, we propose a heuristic method where the\nirregular packing problem is reduced to a regular packing problem. We call\nthe algorithm Opus Incertum Algorithm1. It consists of the following steps:\n1. Compute the geometrical compatibility between pieces\n2. Generate groups of geometrically compatible pieces\n3. Order the pieces in each group (corresponds to solving a TSP)\n4. Spatially arrange the pieces in each group into a compact rectangle\n5. Generate candidate partitions of the set of pieces\n6. Solve the rectangle packing problem for each partition\n7. Local optimization of the layout obtained for each partition\n8. Global optimization of the best layout\n9. Return the best layout\n4.1 Definitions and details\nIn the following we explain each of these steps in detail and introduce the\nnecessary definitions. The final algorithm is summarized in Algorithm 1.\n1Opus Incertum, is a reference to an ancient Roman constructing technique of the same name\nthat consists of irregularly shaped and randomly placed uncut stones inserted in a core of concrete.\nVitruvius, in De architectura (Ten books on Architecture), favours opus incertum, deriding opus\nreticulatum (a similar technique using small pyramid-shaped instead of irregular stones) as more\nexpensive and structurally of inferior quality.\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n5\n4.1.1 Geometrical compatibility between pieces\nLet us consider two pieces Pi and Pj. Here, we assume that the position of\nPi is fixed and denote (r, θ, ϕ) a placement with polar coordinates (r, θ) of the\nreference point of Pj with respect to Pi and ϕ the orientation of Pj. We want to\nfind a placement (r, θ, ϕ) of Pj that avoids an overlap with Pi while minimizing\nthe waste. To make this statement mathematically precise, we define the waste\nas the surface that is inside the convex hull of the set of vertices of the pieces.\nThe optimal placement is then the one that avoids overlapping and yields\na convex hull with minimum area. We introduce the concept of the no-fit\nfunction. The no-fit function of two pieces Pi and Pj is the function NFFPi,Pj\nthat takes as input a polar angle θ and returns the radius r and orientation\nϕ to optimally place Pj with respect to Pi given the rotation angle θ. Once\ncomputed and stored, the no-fit function allows to find the placement that\nyields the convex hull with minimum area. The no-fit function is given by\nNFFPi,Pj(θ) = arg min\nr∈R,ϕ∈Φ\n{area(CH[Pi, Pj(r, θ, ϕ)]) | Pi ∩ Pj(r, θ, ϕ) = ∅} .\n(1)\nHere, CH(Pi, Pj) denotes the convex hull where the optimal convex hull\nCH∗(Pi, Pj) is given by\nCH∗(Pi, Pj) := arg min\nθ∈Θ\n\b\narea(CH[Pi, Pj(r, θ, ϕ)]) | (r, ϕ) = NFFPi,Pj(θ)\n\t\n.\n(2)\nNote that the absolute position of Pi is irrelevant and the relative position\nof Pj is implicitly given by the no-fit function. In the definitions above, Φ, Θ\nare discrete sets of angles and R is a set of radii. For more information see\nSec. 4.1.4.\nAfter optimally placing Pj relative to Pi, the waste can be quantified by\nthe difference between the area of the convex hull and the area of the two\npieces. We will denote the waste as di,j = d(Pi, Pj), since we will later relate\nthis quantity to the distance between two cities i and j in a TSP. With the\ndefinitions above, the waste is given by\ndi,j = d(Pi, Pj) = area[CH∗(Pi, Pj)] − area(Pi) − area(Pj) .\nFurthermore, we define the following measure, which we will refer to as\ngeometrical incompatibility between Pi and Pj.\nDefinition 1 (Distance and geometrical incompatibility/compatibility)\ngi(Pi, Pj) =\nd(Pi, Pj)\narea(CH[Pi, Pj(r, θ, ϕ)])\n(3)\ngc(Pi, Pj) = 1 − gi(Pi, Pj)\n(4)\nSpringer Nature 2021 LATEX template\n6\nA heuristic the irregular strip packing problem\nExamples of distances are given in Fig. 2. The geometrical incompatibility\nis always bounded by 0 and 1. An incompatibility of 0 means that the two\npieces can be placed without waste.\n200\n0\n200\n400\n600\n800\n0\n100\n200\n300\n400\n500\n600\n700\n800\nd(P0, P1) = 52728.1\n(a)\n800\n600\n400\n200\n0\n200\n400\n600\n800\n0\n200\n400\n600\n800\n1000\n1200\nd(P1, P1) = 112540.0\n(b)\nFigure 2: The distance between two pieces and wasted area (grey). The axes\nand distances are given in arbitrary units.\nOur packing algorithm seeks to exploit the geometrical compatibility be-\ntween pairs of pieces. When compatible pieces are placed together, the space\nbetween the pieces is small and this allows to minimize the wasted area in the\ncontainer. The first step of the algorithm consists of computing the geometri-\ncal compatibility between all pairs of pieces, or equivalently, to compute the\ndistance matrix, which we define as\nDefinition 2 (Distance matrix) The N × N square matrix D with components\nDi,j = di,j, where di,j = d(Pi, Pj) is the distance between pieces Pi and Pj.\n4.1.2 Generate groups of geometrically compatible pieces\nIn the second step of the Opus Incertum algorithm, we generate groups of\npieces in which the pieces are pairwise geometrically compatible. We then\nspatially arrange together the pieces that are geometrically compatible. For\nthis, we use the single-linkage clustering algorithm which is a hierarchical\nclustering method [41]. In the beginning, each element is in a cluster of its own.\nThe agglomerative process consists of grouping the two clusters that contain\nthe closest pair of elements in each step. The clusters are then sequentially\ncombined into larger clusters, until all elements are in the same cluster. We\nuse the geometrical incompatibility measure in Eq. (3) to cluster the set of all\npieces. The single-linkage clustering algorithm then produces clusters in which\neach piece has low geometrical incompatibility with at least one other pieces.\nThe resulting set of clusters forms a partition of the set of all pieces.\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n7\nTo this end, it is necessary to abort the agglomerative process before all\nthe pieces belong to a single cluster. We achieve this in two ways. First, we\nintroduce a threshold for the maximum linkage distance allowed for merging\ntwo clusters. To account for the arbitrariness of the threshold, we define several\nthreshold values and obtain different partitions of the set of pieces. Second, we\nimpose a maximum number of pieces per cluster, so that whenever this size is\nabout to be exceeded, the agglomerative process terminates.\n4.1.3 Ordering pieces in each cluster\nConsider a cluster Ci and denote its pieces Pi1, . . . , Pin. The goal is to place\nthese pieces without overlap and as compactly as possible by exploiting their\ngeometrical compatibility. Since the compatibility of pieces is only a binary\nmeasure, for n > 2 we do not know in general how large the area of the\nminimum bounding polygon for the n cluster pieces is. Computing all possible\nplacements that avoid overlap for n pieces is not reasonable since it has an\nexponential scaling in terms of the number of pieces which becomes already\nproblematic for small values of n.\nWe therefore place the pieces one by one in the order of some sequence\nPiσ(1), . . . , Piσ(n). The number of possible permutations σ for a set of n elements\nis n!. To limit the computation, we choose the sequence with minimal total\ndistance:\nmin\nσ\nn−1\nX\ni=1\nd(Piσ(i), Piσ(i+1))\nThis sequence corresponds to the shortest Hamiltonian path, defined as follows.\nDefinition 3 (shortest Hamiltonian path) Consider the fully connected, undirected\nand weighted graph with n = |V | nodes {1, . . . , n} and distances di,j from node i to\nj as weights. A Hamiltonian path is a sequence σ(1), . . . , σ(n) visiting all nodes of\nthe graph exactly once, i.e., σ is a permutation of the set {1, . . . , n}. The shortest\nHamiltonian path is the Hamiltonian path with minimum total distance\nD(σ) =\nn−1\nX\ni=1\ndσ(i),σ(i+1)\nFinding the shortest Hamiltonian path of a weighted graph is known as\nTraveling Salesman Problem (TSP). When n is small enough (roughly n ≤ 10),\nthe TSP is an NP-hard combinatorial optimization problem can be solved\nexactly and fast using brute force search. Solving larger instances quickly be-\ncomes computationally challenging. Quantum computing provides methods to\nsolve this problem heuristically. In this work, we will focus on the Quantum\nApproximate Optimization Algorithm [3] and the a variation thereof called\nQuantum Alternating Operator Ansatz [4]. The former requries the reformula-\ntion of the TSP into a quadratic unconstrained binary optimization (QUBO)\nproblem. This is described in Appendix A.\nSpringer Nature 2021 LATEX template\n8\nA heuristic the irregular strip packing problem\n4.1.4 Packing the pieces of each cluster\nOnce an order is obtained, the pieces in each cluster are packed as compactly\nas possible. For this we use a greedy algorithm that follows in the order of the\nchosen sequence Piσ(1), . . . , Piσ(n). We start by positioning the first piece Piσ(1)\nwith the default position (0, 0). For every subsequent step k = 2, . . . , n, we\nthen place the k-th piece Piσ(k) by orbiting around the previous piece Piσ(k−1)\nand searching for the position (r, θ) and orientation ϕ that minimizes the\narea of the bounding box of Piσ(1), . . . , Piσ(k) while avoiding overlap with the\npreviously positioned pieces.\nThe term orbiting here means that we vary θ from a set of predefined\nangles Θ. For each θ, the no-fit function Eq. (1) returns a radius r and an angle\nϕ. If the k-th piece of the sequence can be placed relatively to the previous\npiece with position (r, θ, ϕ) without overlap with the previously placed pieces,\nthen we place the piece and proceed with the next piece. In the general case,\nhowever, the position returned by the no-fit function can lead to overlapping.\nWe then increase the value of r ∈ R while keeping the orientation ϕ fixed,\nuntil the piece is far enough to avoid overlapping. We refer to this procedure\nas no-fit-function-based greedy packing. Due to the no-fit function and the\nconstraint of keeping the orientation fixed, the complexity of greedy packing is\nonly O([|R| · |Θ|] · [n − 1]). Once the pieces of a cluster are placed, we compute\nthe corresponding bounding box, see Fig. 3.\n400\n200\n0\n200\n400\n600\n800\n1000\n0\n200\n400\n600\n800\n1000\nR({0,1,2}) seq. [0,1,2]   AREA=601303.55\n200\n0\n200\n400\n600\n800\n0\n200\n400\n600\n800\nR({3,6,7}) seq. [3,7,6]   AREA=510408.51\n400\n200\n0\n200\n400\n600\n800\n1000\n0\n200\n400\n600\n800\n1000\n1200\nR({0,1,2,3}) seq. [0,1,2,3]   AREA=691800.20\n400\n200\n0\n200\n400\n600\n800\n1000\n600\n400\n200\n0\n200\n400\n600\nR({4,5,6,7}) seq. [5,4,6,7]   AREA=692014.29\nFigure 3: Packing of pieces in clusters. Axes are given in arbitrary units.\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n9\n4.1.5 Partition filtering\nThe number of partitions obtained may be large and lead to long computation\ntimes. We reduce the number of partitions used for packing the pieces by\nselecting the most promising ones. This can be done by computing a penalty\nfor each partition and keeping only the best npartitions ones. A simple penalty\nscore for some partition consists of the sum of areas of the rectangles.\n4.1.6 Rectangle packing\nEach cluster is a group of pieces that has been placed together tightly into a\nbounding box of rectangular shape. In the rectangle packing step, these rect-\nangles are allocated to the rectangular container with the help of an efficient\nrectangle packer. This is a well known problem [42] which formally consists\nof packing a set of K rectangles R = {R1, R2, . . . , RK}, where each rectangle\nRi has fixed length li and height hi in the rectangular container C of variable\nlength L and fixed height H. When all pieces are rectangular, the solution\nspace for the irregular packing problem becomes finite [16]. If we denote (xi, yi)\nthe coordinates of the bottom left corner of rectangle Ri, the problem can be\ndescribed as follows [42]:\nminimize\nL\nsubject to\n0 ≤ xi ≤ L − li,\n1 ≤ i ≤ K\n0 ≤ yi ≤ H − hi,\n1 ≤ i ≤ K\nAt least one of the next four inequalities\nholds for every pair Ri and Rj of rectangles :\nxi + li ≤ xj\nxj + lj ≤ xi\nyi + hi ≤ yj\nyj + hj ≤ yi\nThe first two constraints ensure that every rectangle is contained in the\ncontainer. The remaining constraints express that rectanlges do not overlap.\nAn illustration for the example in Fig. 1 is given in Fig. 4(a).\n4.1.7 Local optimization\nThe initial placement is obtained from positioning the rectangles in the con-\ntainer and substituting the rectangles for each cluster with the placement of\nthe cluster pieces generated by greedy packing. Each such initial placement\ncan be improved by local optimization. The objective of the local optimization\nprocedure is to reduce the length needed for the container. In this procedure,\nthe position of the pieces is variable, but their orientation is kept constant.\nThe procedure consists of iterating through all the pieces from the bottom-left\nmost to the top right most one and for each pieces, to apply translations of\nSpringer Nature 2021 LATEX template\n10\nA heuristic the irregular strip packing problem\n250\n0\n250\n500\n750\n1000 1250\n0\n200\n400\n600\n800\n1000\n1200\n250\n0\n250\n500\n750\n1000 1250\n0\n200\n400\n600\n800\n1000\n1200\nFigure 4: Results for the example shown in Fig. 1. (a) Rectangle packing for\nthe . The rectangles packed are from left to right, bottom to top R({0, 1, 2, 3}),\nR({4, 5, 6, 7}). (b) Layout obtained with Opus Incertum. The container has a\nlength of L = 1151.89. The percentage of waste is 6.59%. The axes are given\nin arbitrary units.\nsmall amplitude (the granularity ∆r of R) leftwards and/or downwards. Con-\ncretely, we apply translations with amplitude ∆r and direction given by one\nof the following four unit vectors:\nu1 =\n\u0014\n−1\n0\n\u0015\nu2 =\n1\n√\n2\n\u0014\n−1\n−1\n\u0015\nu3 =\n1\n√\n2\n\u0014\n−1\n+1\n\u0015\nu4 =\n\u0014\n0\n−1\n\u0015\nTranslation are applied as long as the translated pieces does not overlap with\nthe other pieces and remain completely inside the container. We cycle several\ntimes through all the pieces until no piece can be translated anymore. The\nresult can be seen in Fig. 4(b).\n4.1.8 Global optimization\nLocal optimization reduces the gaps between neighbouring pieces, but it usu-\nally does not completely remove them. It is sometimes possible to make use\nof these gaps to fit the rightmost piece. By relocating the rightmost piece\ninto one of these gaps, i.e., the piece which occupies a position the maximum\nvalue on the horizontal x-axis, we have a good chance to reduce the length\nneeded for the container. This may not always be the case, as there may be\nseveral rightmost pieces. The relocation thus needs to be repeated until the\ncurrently selected rightmost piece cannot be relocated. To check if a piece can\nbe relocated, we scan from left to right and bottom to top for a position and\norientation of the piece to relocate and check if the piece can be inserted with-\nout exiting the boundaries of the container and without overlapping with one\nof the other pieces. Significant improvements of the container length may be\nobtained as a result of global optimization.\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n11\nAlgorithm 1 Opus Incertum\n1: Inputs: set of N pieces P, fixed container height H, maximum cluster size\nnmax, number of partitions npartitions\n2: Outputs: optimal placement of the pieces and container length\n3: compute the no-fit function NFFPi,Pj for every pair of pieces Pi, Pj ∈ P\n4: compute the distance and geometrical incompatibility matrices D and GI\n5: define the set of distance thresholds T (GI) ← values(GI)\n6: compute a set of partitions of P by single-linkage clustering using the\ndistance thresholds of T (GI) and maximum cluster sizes ranging from 1\nto N pieces per cluster\n7: initialize container length L∗ ← ∞\n8: for each partition C do\n9:\nfor for each cluster C ∈ C do\n10:\nsolve the TSP for the distance sub-matrix D(C)\n11:\nlet s be the shortest Hamiltonian path obtained\n12:\npack greedily the pieces of C in the order of s\n13:\npack greedily the pieces of C in the reverse order of s\n14:\nstore the placement whose bounding box has the smallest area\n15:\nend for\n16: end for\n17: keep from C the npartitions partitions with lowest penalty\n18: for each partition C do\n19:\nfor bins as relaxation of the rectangular container H × L∗ do\n20:\ntry to pack the selected bounding boxes in the bin\n21:\nif a solution is found to the rectangle packing problem then\n22:\noptimize the placement by local optimization\n23:\nlet X be the optimized placement\n24:\nlet l and h be the length and height needed by X\n25:\nif h ≤ H and l < L∗ then\n26:\nupdate optimal placement X∗ ← X and length L∗ ← l\n27:\nend if\n28:\nend if\n29:\nend for\n30: end for\n31: optimize the placement X∗ and length L∗ by shifting the right-most piece\nto the bottom-left-most free area and repeat this step until no further\nimprovement is possible\n32: return optimal placement X∗ and length L∗\n4.2 The algorithm\nWith the previous definitions, we can now state the formal algorithm which\nis shown in Algorithm 1. Given the set of N pieces P = {P0, . . . , PN−1}, we\nfirst compute and store the values of the no-fit functions Eq. (1) for every\nSpringer Nature 2021 LATEX template\n12\nA heuristic the irregular strip packing problem\npair of pieces Pi and Pj. Note that the no-fit function does not need to be re-\ncalculated if the pair of pieces is identical to a pair of pieces that has already\nbeen considered. This happens when pieces have identical shapes. Besides,\nafter NFFPi, Pj has been computed, we can derive directly values of the no-fit\nfunction NFFPj,Pi via\nNFFPj,Pi(θ) = (r, ϕ) where NFFPi,Pj(θ + 180 − ϕ) = (r, −ϕ) .\n(5)\nOnce all no-fit functions are determined, the N ×N distance matrix D can\nbe quickly determined. Each distance di,j is calculated as follows:\nθ∗ ← arg min\nθ∈Θ\n{area(CH(Pi, Pj(r, θ, ϕ))) | (r, ϕ) = NFFPi,Pj(θ)}\n(r∗, ϕ∗) ← NFFPi,Pj(θ∗)\ndi,j ← area(CH(Pi, Pj(r∗, θ∗, ϕ∗))) − area(Pi) − area(Pj(r∗, θ∗, ϕ∗))\nLet T (GI) denote the set of threshold geometrical incompatibilities used\nfor the single-linkage clustering algorithm. This set may be any subset of the\nset of coefficients of the distance matrix GI:\nT (GI) ⊆ values(GI) = {gii,j|i ∈ {0, . . . , N − 1}, j ∈ {0, . . . , N − 1}} .\nIn our algorithm definition, we choose T (GI) = values(GI).\nFor every distance threshold dmax in T (GI) and maximum cluster size nmax\nfrom 1 to N (or some lower upper limit), partition the set of pieces using the\nsingle-linkage clustering algorithm and distance matrix GI. We obtain in this\nway a set of partitions of P. We then initialize the variable L∗ which stores\nthe container length for the best placement found. The initial value given is\ninfinity.\nFor each partition C, we consider every cluster C in C and the distance of\nthe pieces in C, noted D(C), obtained directly as a sub-matrix of D. We then\nsolve the TSP for D(C) and get the shortest Hamiltonian path s = i1, . . . , in\nvisiting once exactly all pieces of the cluster. Since the distance matrix D and\nD(C) are symmetric, the reverse path s′ = in, . . . , i1 has the same length and\nis another equally optimal solution of the TSP. We thus greedily pack the\npieces in each cluster C either in the order of the sequence s or in the order\nof s′. The placements and resulting bounding boxes differ in the general case.\nWe select and store the placement that results in the bounding box with the\nsmallest area of the two in memory.\nFor each partition C, we try to pack the bounding boxes inside the container\nusing a rectangle packer. More precisely, the packer gets the task of finding a\nfeasible placement of all bounding boxes within a rectangular container called\nbin whose dimensions coincide with the current best container found H ×\nL∗, where L∗ is the minimum length found so far. If the rectangle packer is\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n13\nTable 1: Performance of the Quantum Approximate Optimization Algorithm.\nThe optimality is defined in Eq. (6).\nOptimizer\np\nOptimality\nExecution time\nCOBYLA\n1\n78.2%\n2.5s\n2\n76.6%\n5.7s\n3\n79.3%\n9.0s\n4\n77.1%\n12.9s\n5\n85.9%\n17.3s\nBFGS\n1\n68.7%\n6.4s\n2\n71.0%\n16.8s\n3\n73.6%\n26.5s\n4\n70.3%\n44.5s\n5\n73.1%\n50.8s\nL-BFGS-B\n1\n68.7%\n6.3s\n2\n70.4%\n17.5s\n3\n73.6%\n29.8s\n4\n67.9%\n38.2s\n5\n73.1%\n53.3s\nSLSQP\n1\n70.9%\n14.1s\n2\n83.1%\n46.5s\n3\n72.1%\n87.5s\n4\n82.8%\n142.2s\n5\n84.3%\n202.6s\nSPSA\n1\n85.4%\n23.4s\n2\n81.6%\n28.5s\n3\n79.1%\n36.5s\n4\n74.0%\n42.9s\n5\n77.7%\n51.4s\nsuccessful, the bounding boxes are replaced by the pieces of the cluster they\npack, resulting in a feasible placement of the set of all pieces P in a container\nof dimension H × L∗. The placement can be further optimized using local\noptimization, resulting in a container length L ≤ L∗. If L is an improvement\nover L∗, then L∗ is updated with L and we store the placement as the optimal\nplacement X∗. If the length is not reduced, then no update is necessary. If\nthe rectangle packer does not find a solution for this dimension, we relax the\ndimensions of the bin until a solution is found, by enlarging the length L∗\nand/or the height H. Any solution found is optimized by local optimization\nand feasible solutions (h ≤ H) are then compared to the optimal length L∗.\nWhenever the optimal length is improved, we update the variables L∗ and X∗.\nLet X∗ be the best placement found after consideration of all the partitions.\nThe length can be sometimes further optimized by global optimization, i.e.,\nby iteratively relocating the right-most pieces to the left-most free gap in the\ncontainer.\n5 Experimental Results\nTo evaluate the performance of our approach, we create two small problem\ninstances which belong to the class of packing problems where we expect the\nSpringer Nature 2021 LATEX template\n14\nA heuristic the irregular strip packing problem\nTable 2: Performance of the Quantum Alternating Operator Ansatz. The\noptimality is defined in Eq. (6).\nOptimizer\np\nOptimality\nExecution time\nCOBYLA\n1\n66.9%\n6.8s\n2\n70.9%\n17.7s\n3\n72.6%\n33.0s\n4\n84.6%\n54.5s\n5\n74.5%\n79.0s\nBFGS\n1\n61.6%\n3.0s\n2\n54.1%\n6.4s\n3\n61.3%\n10.2s\n4\n63.1%\n14.4s\n5\n63.5%\n19.1s\nL-BFGS-B\n1\n62.9%\n3.2s\n2\n61.7%\n6.6s\n3\n61.3%\n10.4s\n4\n60.8%\n14.4s\n5\n62.9%\n19.1s\nSLSQP\n1\n64.2%\n3.0s\n2\n60.4%\n6.4s\n3\n61.8%\n10.2s\n4\n60.9%\n14.4s\n5\n66.1%\n19.1s\nSPSA\n1\n67.2%\n38.2s\n2\n76.1%\n66.6s\n3\n80.0%\n96.4s\n4\n72.9%\n126.3s\n5\n72.9%\n157.3s\nOpus Incertum Algorithm to yield optimal results. The sets contain six and\nseven pieces, respectively. The pieces can be arranged in pairs or triples and\nform almost perfect rectangles when aligned. These can then be optimally\npacked inside the container by the rectangle packer. For reproducible, we pro-\nvide the definition of the sets of pieces in Appendix B. We also evaluate our\napproach for five problem instances commonly used for benchmarking packing\nalgorithms. The instances are referred to as SHAPES1, SHAPES2, SHIRTS,\nTROUSERS and SWIM and their definition can be found in [43]. Note how-\never that these sets, which contain between 28 and 99 pieces, do not fulfil our\nrequirements very well.\nFor each problem instance, we report the performance obtained with\nSVGnest2 compared to the results of Opus Incertum. Our Python implemen-\ntation, which is based on the Python modules Shapely3 and RectPack4.\nTo solve the TSPs, we implement one classical brute force search and two\nquantum algorithms: the Quantum Approximate Optimization Algorithm and\nthe Quantum Alternating Operator Ansatz. The hyper-parameters for the\nquantum algorithms are the number of repetitions and the classical optimizer,\n2https://github.com/Jack000/SVGnest\n3https://pypi.org/project/shapely/\n4https://pypi.org/project/rectpack/\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n15\nAlgorithm 2 Post-processing of results from quantum circuits.\n1: Inputs: a binary string x0,0 . . . xi,p . . . xn−1,n−1 of length n2\n2: Outputs: a hamiltonian path for the nodes {0, . . . , n − 1}\n3: for each node i, compute Pn−1\np=0 xi,p and if the sum is strictly greater than\n1, select at random a step p∗ which xi,p∗ = 1 and set all the xi,p for p ̸= p∗\nto 0\n4: for each step p, compute Pn−1\ni=0 xi,p and if the sum is strictly greater than\n1, select at random a node i∗ which xi,p∗ = 1 and set all the xi,p for i ̸= i∗\nto 0\n5: for each node i, compute Pn−1\np=0 xi,p and if the sum is null, select at random\na step p∗ for which P\nj xj,p∗ = 0 and set xi,p∗ to 1\n6: for each step p, compute Pn−1\ni=0 xi,p and if the sum is null, select at random\na node i∗ for which P\np′ xi∗,p′ = 0 and set xi∗,p to 1\n7: let σ = i0, . . . , in−1 be the path defined for any step p by ip = i if xi,p = 1\n8: return path σ\nwhich are set as follows. We randomly generate 30 symmetric distance matri-\nces of dimension 4 × 4, using coefficients uniformly distributed between 0 and\n1. We run each algorithm on these problems using repetitions ranging from 1\nto 5 and optimize the circuits using one of the following classical optimizers:\nCOBYLA, BFGS, L-BFGS-B, SLSQP and SPSA. The quantum algorithms\nare then executed using Qiskit [44] on a quantum simulator without noise\n(qasm simulator). Each circuit is executed 1,000 times and the result(s) with\nhighest count is/are post-processed. Post-processing is necessary to ensure the\nvalidity of each solution. We call any Hamiltonian path, i.e., a sequence visit-\ning each node exactly once a valid solution. The post-processing is shown in\nAlgorithm 2. In case multiple solutions are obtained, we compute the corre-\nsponding total distances and keep the Hamiltonian path σ with smallest total\ndistance D(σ) as a unique solution. The performance for a path is measured\nby the optimality of its total distance, which we define as\n1 − D(σ) − Dmin\nDmax − Dmin\n(6)\nThe optimality is averaged over the different TSPs.\nThe results are given in the Tables 1 and 2. It can be observed that in our\nexperiments, the vanilla version of the Quantum Approximate Optmiziation\nAlgorithm performs overall better while simulataneously requiring less execu-\ntion time. As expected, the quality of the solution generally increases with an\nincreasing number of iterations, although we observe some exceptions such as\nthe SPSA variant of the Quantum Approximate Optmiziation Algorithm. For\nthe following application of the Opus Incertum Algorithm, we proceed with a\nchoice of the COBYLA optimizer and p = 5 repetitions for the Quantum Ap-\nproximate Optimization Algorithm, and the COBYLA optimizer and p = 4\nrepetitions for the Quantum Alternating Operator Ansatz.\nSpringer Nature 2021 LATEX template\n16\nA heuristic the irregular strip packing problem\nPROBLEM\nINSTANCE\nvs. METHOD\nPUZZLE1\n6\nshapes,\n6\npieces,\nH = 750\nPUZZLE2\n7\nshapes,\n7\npieces,\nH = 420\nPUZZLE3\n12\nshapes,\n12\npieces,\nH = 1200\nOpus Incertum (Brute Force\nSearch)\nW=14.77%,\nT=659.02s\nW=6.55%,\nT=927.17s\nW=14.47%,\nT=8784.24s\nOpus\nIncertum\n(Quantum\nApproximate\nOptimization\nAlgorithm, simulator)\nW=14.77%,\nT=645.50s\nW=6.55%,\nT=830.17s\nW=18.76%,\nT=8557.82s\nOpus\nIncertum\n(Quantum\nApproximate\nOptimization\nAlgorithm,\nquantum\ncom-\nputer)\nW=14.77%,\nT=697.29s\nW=6.70%,\nT=899.36s\nW=20.10%,\nT=9155.27s\nOpus\nIncertum\n(Quan-\ntum\nAlternating\nOperator\nAnsatz, simulator)\nW=14.77%,\nT=656.60s\nW=6.55%,\nT=902.98s\nW=17.36%,\n9348.29s\nOpus\nIncertum\n(Quan-\ntum\nAlternating\nOperator\nAnsatz, quantum computer)\nW=14.77%,\nT=705.43s\nW=6.86%,\nT=1069.09s\nW=21.35%,\nT=22877.37s\nFigure 5: Performance results for PUZZLE1, PUZZLE2 and PUZZLE3. Re-\nsults from real quantum computer are obtained from IBM Ehningen.\nPROBLEM\nINSTANCE\nvs. METHOD\nSHAPES1\n4\nshapes,\n43\npieces,\nH = 400\nSHAPES2\n7\nshapes,\n28\npieces,\nH = 150\nSHIRTS\n8\nshapes,\n99\npieces,\nH = 400\nTROUSERS\n17\nshapes,\n64\npieces,\nH = 790\nSWIM\n10\nshapes,\n48\npieces,\nH = 5752\nOpus Incertum (Brute Force\nSearch)\nW=42.97%,\nT=2137.24s\nW=27.12%,\nT=4981.99s\nW=24.20%,\nT=13279.78s\nW=16.77%,\nT=50639.89s\nW=44.42%,\nT=69377.16s\nOpus\nIncertum\n(Quantum\nApproximate\nOptimization\nAlgorithm, simulator)\nW=42.97%,\nT=3066.53s\nW=27.12%,\nT=5370.31s\nW=22.33%,\nT=15495.49s\nW=16.77%,\nT=39215.46s\nW=49.78%,\nT=32074.27s\nOpus\nIncertum\n(Quantum\nApproximate\nOptimization\nAlgorithm,\nquantum\ncom-\nputer)\nW=42.97%,\nT=3424.93s\nW=27.12%,\nT=13373.23s\nW=26.44%,\nT=83871.25s\nW=16.77%,\nT=47787.09s\nW=41.31%,\nT=34753.92s\nOpus\nIncertum\n(Quan-\ntum\nAlternating\nOperator\nAnsatz, simulator)\nW=37.22%,\nT=3356.84s\nW=27.12%,\nT=6611.17s\nW=24.20%,\nT=8294.80s\nW=16.77%,\nT=39171.81s\nW=40.26%,\nT=35808.40s\nOpus\nIncertum\n(Quan-\ntum\nAlternating\nOperator\nAnsatz, quantum computer)\nW=37.22%,\nT=4462.86s\nW=27.12%,\nT=11551.44s\nW=22.33%,\nT=8930.77s\nW=16.77%,\nT=47459.27s\nW=41.31%,\nT=41310.82s\nFigure\n6:\nPerformance\nresults\nfor\nSHAPES1,\nSHAPES2,\nSHIRTS,\nTROUSERS and SWIM. Results from real quantum computer are obtained\nfrom IBM Ehningen.\nOnce the hyper-parameters are set, we build variational circuits with p\nrepetitions and train the parameters of the QAOA algorithms with the cho-\nsen optimizer using a noiseless quantum simulator up to n2 = 16 qubits.\nWe compare these results to computations on the IBM quantum computer in\nEhningen [45]. As for the hyper-parameter optimization setting, we use 1,000\nshots per circuit, select the results with the highest count and post-process the\nbit-strings to obtain valid solutions.\nThe performance results for PUZZLE1, PUZZLE2 and PUZZLE3 are\nshown in Fig. 5 and for SHAPES1, SHAPES2, SHIRTS, TROUSERS and\nSWIM in Fig. 6. The results obtained with the Opus Incertum Algorithm\ndepend on several factors, such as the number of rotation angles in Θ and ori-\nentation angles in Φ, spatial granularity ∆r, the spatial granularity of the grid\nused for relocating pieces, the maximum cluster size nmax allowed and the algo-\nrithm and hyper-parameter combination used to solve the TSP instances and\nthe number of partitions. In our experiments, we allow rotations in multiples\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n17\nof 5 degrees which amounts to 72 rotations in total. For PUZZLE1, PUZ-\nZLE2 and PUZZLE3, we restrict the rotations to multiples of 90 degrees. For\nSHAPES1, SHAPES2, SHIRTS, SWIM and TROUSERS, we consider multi-\nple of 45 degrees, amounting to 8 distinct rotations. The spatial granularity\nis set to ∆r = 5. The grid is a uniform grid from the container of dimension\n100 × 100. In our experimental setting, we limit the maximum cluster size to\n4 pieces as a higher number would then exceed the maximum number of 16\nqubits that a quantum simulator can handle. We set the number of partitions\nto 20 for PUZZLE 1, 40 for PUZZLE2 and 50 for PUZZLE3. These parameters\nplay a critical role in determining the algorithm’s ability to find an optimal\nlayout, with the choice of rotation angles directly affecting the potential for\npiece alignment and the granularity impacting the resolution of placement.\nThe decision to use different parameters for different problem sets illustrates a\ntailored approach to optimization, trading off between computational demand\nand the quality of the solution.\nNote, however, that better results than those displayed can be achieved\nby increasing for instance the number of rotations, increasing the maximum\ncluster size (up to 10 pieces when solving the TSPs by brute force search) and\nthe number of partitions, at the expense of longer computation times. The\nfinal placements for each problem instance can be found in Appendix C.\nIt can be observed that solving the TSP with one of the quantum algo-\nrithms is often comparable to brute force solutions with no general tendency\nof a significant performance supremacy in either direction. Notably, the results\nobtained by solving the TSP on a real quantum computer are competitive\nwith those obtained from a noiseless simulation, indicating a certain robust-\nness in the Opus Incertum Algorithm. For example, in PUZZLE2, the waste\npercentage achieved by the Quantum Approximate Optimization Algorithm\non a quantum computer (W = 6.70%, T = 899.36s) closely mirrors that of\nthe brute force search (W = 6.55%, T = 927.17s), illustrating the quantum\nmethod’s capacity to match classical performance levels. This parity is visible\nin other problem instances as well and suggests that while quantum computing\noffers a novel approach to problem-solving, its current stage of development\nshows comparable efficiency to classical methods for this specific application.\n6 Conclusion\nWe have decomposed the NP-hard strip packing problem into two core prob-\nlems, the TSP and the regular packing problem. In this work, we have solved\nthe TSP classically and with quantum computing, using two different vari-\nants of the QAOA algorithm. Interestingly, the regular packing problem can\nbe formulated in QUBO form and also be solved using quantum computing,\nas demonstrated recently in [40]. The practicality of the proposed algorithm\nas a quantum-classical hybrid or a purely classical, quantum-inspired method,\nis contingent on the advancements in quantum computing and the chosen ap-\nproach for solving the underlying TSP. It is agnostic to the specific method\nSpringer Nature 2021 LATEX template\n18\nA heuristic the irregular strip packing problem\nemployed for the TSP, meaning the performance significantly varies with the\nchoice between novel quantum algorithms or classical heuristics. Furthermore,\nthe selection of hyperparameters, particularly the granularity of angles and\ngrids, introduces a crucial trade-off between the quality and performance of\nthe solution. In comparing our algorithm’s effectiveness, it is important to\nbenchmark not only against brute force solutions but also against classical\nheuristics, which can offer a more efficient yet effective alternative. Another\npromising avenue for research is exploring scalability, particularly with regards\nto significantly increasing the number of pieces within each cluster. This is\nparticularly interesting because, fundamentally, the Opus Incertum algorithm\nperforms local optimization that becomes more global as the number of pieces\nwithin each cluster increases relative to the total number of clusters.\nThe proposed approach may be improved as follows. Other measures of\ngeometrical compatibility may be developed and lead to more dense clusters\nof pieces. The algorithm complexity may be improved. Indeed, the number of\npartitions of the set of pieces used for generating candidate placements may\nbe reduced, by considering only the most promising partitions. For instance,\nafter computing all partitions, one could assign to each partition a loss simply\ndefined as the total area of the boxes bounding the clustered pieces and choose\nthe partitions with the smallest loss.\n7 Acknowledgements\nThis work was part of the SEQUOIA project funded by the Minister for Eco-\nnomic Affairs, Labour and Tourism Baden-W¨urttemberg. We also acknowledge\nuse of the IBM Quantum Experience for this work. The views expressed are\nthose of the authors and do not reflect the official policy or position of IBM\nor the IBM Quantum team.\nReferences\n[1] Gomes, A.M., Oliveira, J.F.: Solving irregular strip packing problems\nby hybridising simulated annealing and linear programming. European\nJournal of Operational Research 171(3), 811–829 (2006)\n[2] Abbas, A., Ambainis, A., Augustino, B., B¨artschi, A., Buhrman, H., Cof-\nfrin, C., Cortiana, G., Dunjko, V., Egger, D.J., Elmegreen, B.G., et al.:\nQuantum optimization: Potential, challenges, and the path forward. arXiv\npreprint arXiv:2312.02279 (2023)\n[3] Farhi, E., Goldstone, J., Gutmann, S., Sipser, M.: Quantum computation\nby adiabatic evolution. arXiv preprint quant-ph/0001106 (2000)\n[4] Hadfield, S., Wang, Z., O’gorman, B., Rieffel, E.G., Venturelli, D., Biswas,\nR.: From the quantum approximate optimization algorithm to a quantum\nalternating operator ansatz. Algorithms 12(2), 34 (2019)\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n19\n[5] Leao, A.A., Toledo, F.M., Oliveira, J.F., Carravilla, M.A., Alvarez-\nVald´es, R.: Irregular packing problems: A review of mathematical models.\nEuropean Journal of Operational Research 282(3), 803–822 (2020)\n[6] Toledo, F.M., Carravilla, M.A., Ribeiro, C., Oliveira, J.F., Gomes, A.M.:\nThe dotted-board model: a new mip model for nesting irregular shapes.\nInternational Journal of Production Economics 145(2), 478–487 (2013)\n[7] Rodrigues, M.O., Toledo, F.M.: A clique covering mip model for the ir-\nregular strip packing problem. Computers & Operations Research 87,\n221–234 (2017)\n[8] Scheithauer, G., Terno, J.: Modeling of packing problems. Optimization\n28(1), 63–84 (1993)\n[9] Daniels, K., Li, Z., Milenkovic, V.: Multiple containment methods (1994)\n[10] Dean, H.T.: Minimizing waste in the 2-dimensional cutting stock problem\n(2002)\n[11] Fischetti, M., Luzzi, I.: Mixed-integer programming models for nesting\nproblems. Journal of Heuristics 15(3), 201–226 (2009)\n[12] Alvarez-Valdes, R., Martinez, A., Tamarit, J.: A branch & bound al-\ngorithm for cutting and packing irregularly shaped pieces. International\nJournal of Production Economics 145(2), 463–477 (2013)\n[13] Cherri, L.H., Mundim, L.R., Andretta, M., Toledo, F.M., Oliveira, J.F.,\nCarravilla, M.A.: Robust mixed-integer linear programming models for\nthe irregular strip packing problem. European Journal of Operational\nResearch 253(3), 570–583 (2016)\n[14] Leao, A.A., Toledo, F.M., Oliveira, J.F., Carravilla, M.A.: A semi-\ncontinuous mip model for the irregular strip packing problem. Interna-\ntional Journal of Production Research 54(3), 712–721 (2016)\n[15] Martinez-Sykora, A., Alvarez-Vald´es, R., Bennell, J.A., Ruiz, R., Tamarit,\nJ.M.: Matheuristics for the irregular bin packing problem with free\nrotations. European Journal of Operational Research 258(2), 440–455\n(2017)\n[16] Bennell, J.A., Oliveira, J.F.: The geometry of nesting problems: A tutorial.\nEuropean journal of operational research 184(2), 397–415 (2008)\n[17] Oliveira, J.F.C., Ferreira, J.A.S.: In: Vidal, R.V.V. (ed.) Algorithms for\nNesting Problems, pp. 255–273. Springer, Berlin, Heidelberg (1993)\n[18] Segenreich, S.A., Braga, L.M.P.F.: Optimal nesting of general plane\nSpringer Nature 2021 LATEX template\n20\nA heuristic the irregular strip packing problem\nfigures: a monte carlo heuristical approach. Computers & Graphics 10(3),\n229–237 (1986)\n[19] Babu, A.R., Babu, N.R.: A generic approach for nesting of 2-d parts in 2-\nd sheets using genetic and heuristic algorithms. Computer-Aided Design\n33(12), 879–891 (2001)\n[20] Preparata, F.P., Shamos, M.I.: Computational geometry: an introduction.\nSpringer (2012)\n[21] Konopasek, M.: Mathematical treatments of some apparel marking and\ncutting problems. US Department of Commerce Report 99(26), 90857–10\n(1981)\n[22] Mahadevan, A.: Optimization in computer-aided pattern packing (mark-\ning, envelopes). PhD thesis (1984). AAI8507009\n[23] Ferreira, J., Alves, J., Albuquerque, C., Oliveira, J., Ferreira, J., Matos, J.:\nA flexible custom computing machine for nesting problems. Proceedings\nof XIII DCIS, Madrid, Spain, 348–354 (1998)\n[24] Milenkovic, V., Daniels, K., Li, Z.: Automatic marker making. In: Pro-\nceedings of the Third Canadian Conference on Computational Geometry,\npp. 243–246 (1991). Simon Fraser University\n[25] Ghosh, P.K.: An algebra of polygons through the notion of negative\nshapes. CVGIP: Image Understanding 54(1), 119–144 (1991)\n[26] Bennell, J.A., Dowsland, K.A.: Hybridising tabu search with optimisation\ntechniques for irregular stock cutting. Management Science 47(8), 1160–\n1172 (2001)\n[27] Stoyan, Y., Scheithauer, G., Gil, N., Romanova, T.: Phi-functions for\ncomplex 2d-objects. Quarterly Journal of the Belgian, French and Italian\nOperations Research Societies 2(1), 69–84 (2004)\n[28] Chernov, N., Stoyan, Y., Romanova, T.: Mathematical model and efficient\nalgorithms for object packing problem. Computational Geometry 43(5),\n535–553 (2010)\n[29] Johnson, D.S., Demers, A., Ullman, J.D., Garey, M.R., Graham, R.L.:\nWorst-case performance bounds for simple one-dimensional packing algo-\nrithms. SIAM Journal on computing 3(4), 299–325 (1974)\n[30] Jakobs, S.: On genetic algorithms for the packing of polygons. European\njournal of operational research 88(1), 165–181 (1996)\n[31] Sato, A.K., Martins, T.C., Tsuzuki, M.S.G.: An algorithm for the strip\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n21\npacking problem using collision free region and exact fitting placement.\nComputer-Aided Design 44(8), 766–777 (2012)\n[32] Sato, A.K., Martins, T.C., Gomes, A.M., Tsuzuki, M.S.G.: Raster pene-\ntration map applied to the irregular packing problem. European Journal\nof Operational Research 279(2), 657–671 (2019)\n[33] Elkeran, A.: A new approach for sheet nesting problem using guided\ncuckoo search and pairwise clustering. European Journal of Operational\nResearch 231(3), 757–769 (2013)\n[34] Leung, S.C., Lin, Y., Zhang, D.: Extended local search algorithm based\non nonlinear programming for two-dimensional irregular strip packing\nproblem. Computers & Operations Research 39(3), 678–686 (2012)\n[35] Imamichi, T., Yagiura, M., Nagamochi, H.: An iterated local search al-\ngorithm based on nonlinear programming for the irregular strip packing\nproblem. Discrete Optimization 6(4), 345–361 (2009)\n[36] Egeblad, J., Nielsen, B.K., Odgaard, A.: Fast neighborhood search for two-\nand three-dimensional nesting problems. European Journal of Operational\nResearch 183(3), 1249–1266 (2007)\n[37] Layeb, A., Boussalia, S.R.: A novel quantum inspired cuckoo search al-\ngorithm for bin packing problem. International Journal of Information\nTechnology and Computer Science 4(5), 58–67 (2012)\n[38] de Andoin, M.G., Osaba, E., Oregi, I., Villar-Rodriguez, E., Sanz, M.:\nHybrid quantum-classical heuristic for the bin packing problem. arXiv\npreprint arXiv:2204.05637 (2022)\n[39] Garcia-de-Andoin, M., Oregi, I., Villar-Rodriguez, E., Osaba, E., Sanz,\nM.: Comparative benchmark of a quantum algorithm for the bin packing\nproblem. arXiv preprint arXiv:2207.07460 (2022)\n[40] Terada, K., Oku, D., Kanamaru, S., Tanaka, S., Hayashi, M., Yamaoka,\nM., Yanagisawa, M., Togawa, N.: An ising model mapping to solve rectan-\ngle packing problem. In: 2018 International Symposium on VLSI Design,\nAutomation and Test (VLSI-DAT), pp. 1–4 (2018). IEEE\n[41] Everitt, B.S., Landau, S., Leese, M., Stahl, D.: Cluster Analysis, pp. 73–\n75. John Wiley & Sons, Ltd, Hoboken (2011)\n[42] Ibaraki, T., Imahori, S., Yagiura, M.: In: Blum, C., Aguilera, M.J.B., Roli,\nA., Sampels, M. (eds.) Hybrid Metaheuristics for Packing Problems, pp.\n185–219. Springer, Berlin, Heidelberg (2008)\nSpringer Nature 2021 LATEX template\n22\nA heuristic the irregular strip packing problem\n[43] Oliveira, J.F., Gomes, A.M., Ferreira, J.S.: Topos–a new constructive\nalgorithm for nesting problems. OR-Spektrum 22(2), 263–284 (2000)\n[44] Qiskit Community: Qiskit: An Open-Source Framework for Quan-\ntum Computing (2017). https://doi.org/10.5281/zenodo.2562110. https:\n//github.com/Qiskit/qiskit\n[45] IBM Quantum https://quantum-computing.ibm.com (2023)\n[46] Lucas, A.: Ising formulations of many np problems. Frontiers in physics\n2, 5 (2014)\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n23\nAppendix A\nFormulating the TSP as a QUBO\nIn this section, we describe here how the TSP is encoded as a QUBO [46]. A\npath σ(1), . . . , σ(n) through the nodes 1, . . . , n of the graph is encoded by a\nset x of n2 binary variables xi,p ∈ {0, 1}, where i and p are integers that range\nfrom 1 to n. Let xi,p ∈ {0, 1} be 1 if the path goes through node i at step p.\nThe path visits n nodes if and only if ∀p ∈ {1, . . . , n} : Pn\ni=1 xi,p = 1. The\npath visits each node once if and only if ∀i ∈ {1, . . . , n} : Pn\np=1 xi,p = 1. The\ntotal distance to be minimized is D(x) = Pn\ni=1\nPn\nj=1 di,j\nPn−1\np=1 xi,pxj,p+1. The\nTSP is then equivalent to minimizing\nC(x) =\nn\nX\ni=1\nn\nX\nj=1\ndi,j\nn−1\nX\np=1\nxi,pxj,p+1+A\nn\nX\np=1\n \n1 −\nn\nX\ni=1\nxi,p\n!2\n+A\nn\nX\ni=1\n \n1 −\nn\nX\np=1\nxi,p\n!2\nas long as the penalty A is large enough (A > max{|di,j|}).\nAppendix B\nDefinition of puzzles\n• PUZZLE1 (6 pieces):\n– P0 = [(0, 0), (400, 0), (400, 400)]\n– P1 = [(0, 0), (450, 0), (480, 470), (0, 480), (0, 400), (300, 400), (400, 300),\n(300, 200), (0, 200)]\n– P2 = [(0, 0), (100, 0), (100, 400), (200, 400), (200, 500), (0, 500)]\n– P3 = [(0, 0), (400, 0), (400, 280), (20, 690)]\n– P4 = [(0, 0), (100, 0), (100, 470), (0, 490), (0, 280), (-300, 280), (-370,\n200), (-300, 130), (0, 130)]\n– P5 = [(0, 0), (100, 0), (100, 400), (200, 400), (200, 500), (0, 500)]\n• PUZZLE2 (7 pieces):\n– P0 = [(0, 0), (200, 0), (200, 300), (-100, 300), (-100, 100), (0, 100)]\n– P1 = [(0, 0), (200, 0), (190, 150), (100, 100), (0, 150)]\n– P2 = [(0, 0), (300, 0), (300, 100), (200, 100)]\n– P3 = [(0, 0), (300, 0), (300, 190), (200, 190), (200, 100), (0, 100)]\n– P4 = [(0, 0), (150, 0), (200, 100), (150, 200), (0, 200), (-50, 150), (0, 100),\n(-50, 50)]\n– P5 = [(0, 0), (200, 0), (200, 90), (150, 40), (100, 90), (50, 40), (0, 90)]\n– P6 = [(0, 0), (300, 0), (300, 100), (200, 100)]\n• PUZZLE3 (12 pieces):\n– P0 = [(0, 0), (400, 0), (400, 120), (480, 120), (480, 480), (280, 480), (280,\n720), (480, 720), (480, 780), (0, 780)]\n– P1 = [(0, 0), (700, 0), (700, 250), (600, 150), (500, 250), (300, 250), (200,\n350), (100, 250), (0, 250)]\n– P2 = [(0, 0), (680, 0), (700, 380), (500, 180), (300, 380), (0, 170)]\nSpringer Nature 2021 LATEX template\n24\nA heuristic the irregular strip packing problem\n– P3 = [(0, 0), (270, 0), (170, 100), (270, 200), (170, 300), (170, 400), (0,\n400), (0, 270), (-70, 270), (-70, 120), (0, 120)]\n– P4 = [(0, 0), (300, 0), (300, 500), (200, 370), (100, 650), (0, 470)]\n– P5 = [(0, 0), (280, 0), (180, 320), (280, 320), (280, 480), (180, 480), (280,\n780), (0, 780)]\n– P6 = [(0, 0), (300, 0), (300, 580), (200, 280), (100, 700), (0, 500)]\n– P7 = [(0, 0), (100, 0), (100, 100), (0, 200), (100, 300), (100, 500), (200,\n600), (100, 700), (-200, 700), (0, 400), (-200, 200)]\n– P8 = [(0, 0), (100, 0), (100, 80), (300, 80), (300, 0), (400, 0), (400, 200),\n(0, 200)]\n– P9 = [(0, 0), (400, 0), (500, 300), (400, 300), (400, 500), (500, 500), (400,\n800), (100, 800), (100, 700), (-100, 700), (-100, 500), (100, 500), (100, 100),\n(0, 100)]\n– P10 = [(0, 0), (100, 0), (100, 100), (200, 100), (200, 0), (300, 0), (300, 100),\n(400, 100), (400, 300), (300, 300), (200, 200), (100, 300), (0, 200)]\n– P11 = [(0, 0), (180, 0), (180, 80), (70, 80), (70, 220), (180, 220), (180, 280),\n(80, 280), (80, 400), (0, 400)]\nAppendix C\nFinal placements\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n25\n0\n250\n500\n750\n1000\n1250\n1500\n1750\n2000\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\nP0\nP1\nP2\nP3\nP4\nP5\nPUZZLE1: 6 pieces\n(a) Set of 6 pieces for PUZZLE1\n0\n200\n400\n600\n800\n1000\n0\n100\n200\n300\n400\n500\n600\n700\nLayout for PUZZLE1\n(b) Opus Incertum (Brute Force Search)\n200\n400\n600\n800\n1000\n1200\n1400\n0\n200\n400\n600\n800\nP0\nP1\nP2\nP3\nP4\nP5\nP6\nPUZZLE2: 7 pieces\n(c) Set of 7 pieces for PUZZLE2\n0\n100\n200\n300\n400\n500\n600\n0\n100\n200\n300\n400\nLayout for PUZZLE2\n(d) Opus Incertum (Brute Force Search)\n0\n500\n1000\n1500\n2000\n2500\n3000\n3500\n500\n1000\n1500\n2000\n2500\nP0\nP1\nP2\nP3\nP4\nP5\nP6\nP7\nP8\nP9\nP10\nP11\nPUZZLE3: 12 pieces\n(e) Set of 12 pieces for PUZZLE3\n0\n250\n500\n750\n1000\n1250\n1500\n1750\n0\n200\n400\n600\n800\n1000\n1200\nLayout for PUZZLE3\n(f) Opus Incertum (Brute Force Search)\nFigure C1: Results obtained for PUZZLE1, PUZZLE2 and PUZZLE3 using\nOpus Incertum and Brute Force Search.\nSpringer Nature 2021 LATEX template\n26\nA heuristic the irregular strip packing problem\n200\n400\n600\n800\n1000\n1200\n0\n200\n400\n600\n800\nP0\nP1\nP2\nP3\nP4\nP5\nP6\nP7\nP8\nP9\nP10\nP11\nP12\nP13\nP14\nP15\nP16\nP17\nP18\nP19\nP20\nP21\nP22\nP23\nP24\nP25\nP26\nP27\nP28\nP29\nP30\nP31\nP32\nP33\nP34\nP35\nP36\nP37\nP38\nP39\nP40\nP41\nP42\nSHAPES1: 43 pieces\n(a) Set of 43 pieces for SHAPES1\n0\n100\n200\n300\n400\n500\n600\n700\n0\n100\n200\n300\n400\nLayout for SHAPES1\n(b) Opus Incertum (Brute Force Search)\n0\n100\n200\n300\n400\n500\n600\n700\n0\n100\n200\n300\n400\nLayout for SHAPES1\n(c) Opus Incertum (Quantum Approximate Op-\ntimization Algorithm, simulator)\n0\n100\n200\n300\n400\n500\n600\n700\n0\n100\n200\n300\n400\nLayout for SHAPES1\n(d) Opus Incertum (Quantum Approximate Op-\ntimization Algorithm, quantum computer)\n0\n100\n200\n300\n400\n500\n600\n0\n100\n200\n300\n400\nLayout for SHAPES1\n(e) Opus Incertum (Quantum Alternating Oper-\nator Ansatz, simulator)\n0\n100\n200\n300\n400\n500\n600\n0\n100\n200\n300\n400\nLayout for SHAPES1\n(f) Opus Incertum (Quantum Alternating Oper-\nator Ansatz, quantum computer)\nFigure C2: Results obtained for SHAPES1.\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n27\n0\n100\n200\n300\n400\n50\n100\n150\n200\n250\n300\n350\nP0\nP1\nP2\nP3\nP4\nP5\nP6\nP7\nP8\nP9\nP10\nP11\nP12\nP13\nP14\nP15\nP16\nP17\nP18\nP19\nP20\nP21\nP22\nP23\nP24\nP25\nP26\nP27\nSHAPES2: 28 pieces\n(a) Set of 28 pieces for SHAPES2\n0\n50\n100\n150\n200\n250\n300\n0\n50\n100\n150\nLayout for SHAPES2\n(b) Opus Incertum (Brute Force Search)\n0\n50\n100\n150\n200\n250\n300\n0\n50\n100\n150\nLayout for SHAPES2\n(c) Opus Incertum (Quantum Approximate Op-\ntimization Algorithm, simulator)\n0\n50\n100\n150\n200\n250\n300\n0\n50\n100\n150\nLayout for SHAPES2\n(d) Opus Incertum (Quantum Approximate Op-\ntimization Algorithm, quantum computer)\n0\n50\n100\n150\n200\n250\n300\n0\n50\n100\n150\nLayout for SHAPES2\n(e) Opus Incertum (Quantum Alternating Oper-\nator Ansatz, simulator)\n0\n50\n100\n150\n200\n250\n300\n0\n50\n100\n150\nLayout for SHAPES2\n(f) Opus Incertum (Quantum Alternating Oper-\nator Ansatz, quantum computer)\nFigure C3: Results obtained for SHAPES2.\nSpringer Nature 2021 LATEX template\n28\nA heuristic the irregular strip packing problem\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n0\n200\n400\n600\n800\n1000\n1200\nP0\nP1\nP2\nP3\nP4\nP5\nP6\nP7\nP8\nP9\nP10\nP11\nP12\nP13\nP14\nP15\nP16\nP17\nP18\nP19\nP20\nP21\nP22\nP23\nP24\nP25\nP26\nP27\nP28\nP29\nP30\nP31\nP32\nP33\nP34\nP35\nP36\nP37\nP38\nP39\nP40\nP41\nP42\nP43\nP44\nP45\nP46\nP47\nP48\nP49\nP50\nP51\nP52\nP53\nP54\nP55\nP56\nP57\nP58\nP59\nP60\nP61\nP62\nP63\nP64\nP65\nP66\nP67\nP68\nP69\nP70\nP71\nP72\nP73\nP74\nP75\nP76\nP77\nP78\nP79\nP80\nP81\nP82\nP83\nP84\nP85\nP86\nP87\nP88\nP89\nP90\nP91\nP92\nP93\nP94\nP95\nP96\nP97\nP98\nSHIRTS: 99 pieces\n(a) Set of 99 pieces for SHIRTS\n0\n100\n200\n300\n400\n500\n600\n700\n0\n100\n200\n300\n400\nLayout for SHIRTS\n(b) Opus Incertum (Brute Force Search)\n0\n100\n200\n300\n400\n500\n600\n700\n0\n100\n200\n300\n400\nLayout for SHIRTS\n(c) Opus Incertum (Quantum Approximate Op-\ntimization Algorithm, simulator)\n0\n100\n200\n300\n400\n500\n600\n700\n100\n0\n100\n200\n300\n400\n500\nLayout for SHIRTS\n(d) Opus Incertum (Quantum Approximate Op-\ntimization Algorithm, quantum computer)\n0\n100\n200\n300\n400\n500\n600\n700\n0\n100\n200\n300\n400\nLayout for SHIRTS\n(e) Opus Incertum (Quantum Alternating Oper-\nator Ansatz, simulator)\n0\n100\n200\n300\n400\n500\n600\n700\n0\n100\n200\n300\n400\nLayout for SHIRTS\n(f) Opus Incertum (Quantum Alternating Oper-\nator Ansatz, quantum computer)\nFigure C4: Results obtained for SHIRTS.\nSpringer Nature 2021 LATEX template\nA heuristic the irregular strip packing problem\n29\n1000\n2000\n3000\n4000\n5000\n500\n0\n500\n1000\n1500\n2000\n2500\nP0\nP1\nP2\nP3\nP4\nP5\nP6\nP7\nP8\nP9\nP10\nP11\nP12\nP13\nP14\nP15\nP16\nP17\nP18\nP19\nP20\nP21\nP22\nP23\nP24\nP25\nP26\nP27\nP28\nP29\nP30\nP31\nP32\nP33\nP34\nP35\nP36\nP37\nP38\nP39\nP40\nP41\nP42\nP43\nP44\nP45\nP46\nP47\nP48\nP49\nP50\nP51\nP52\nP53\nP54\nP55\nP56\nP57\nP58\nP59\nP60\nP61\nP62\nP63\nTROUSERS: 64 pieces\n(a) Set of 64 pieces for SHIRTS\n0\n500\n1000\n1500\n2000\n2500\n500\n250\n0\n250\n500\n750\n1000\n1250\nLayout for TROUSERS\n(b) Opus Incertum (Brute Force Search)\n0\n500\n1000\n1500\n2000\n2500\n500\n250\n0\n250\n500\n750\n1000\n1250\nLayout for TROUSERS\n(c) Opus Incertum (Quantum Approximate Op-\ntimization Algorithm, simulator)\n0\n500\n1000\n1500\n2000\n2500\n500\n250\n0\n250\n500\n750\n1000\n1250\nLayout for TROUSERS\n(d) Opus Incertum (Quantum Approximate Op-\ntimization Algorithm, quantum computer)\n0\n500\n1000\n1500\n2000\n2500\n500\n250\n0\n250\n500\n750\n1000\n1250\nLayout for TROUSERS\n(e) Opus Incertum (Quantum Alternating Oper-\nator Ansatz, simulator)\n0\n500\n1000\n1500\n2000\n2500\n500\n250\n0\n250\n500\n750\n1000\n1250\nLayout for TROUSERS\n(f) Opus Incertum (Quantum Alternating Oper-\nator Ansatz, quantum computer)\nFigure C5: Results obtained for TROUSERS.\nSpringer Nature 2021 LATEX template\n30\nA heuristic the irregular strip packing problem\n2000\n4000\n6000\n8000\n10000\n12000\n14000\n16000\n0\n2000\n4000\n6000\n8000\n10000\nP0\nP1\nP2\nP3\nP4\nP5\nP6\nP7\nP8\nP9\nP10\nP11\nP12\nP13\nP14\nP15\nP16\nP17\nP18\nP19\nP20\nP21\nP22\nP23\nP24\nP25\nP26\nP27\nP28\nP29\nP30\nP31\nP32\nP33\nP34\nP35\nP36\nP37\nP38\nP39\nP40\nP41\nP42\nP43\nP44\nP45\nP46\nP47\nSWIM: 48 pieces\n(a) Set of 48 pieces for SWIM\n0\n1000\n2000\n3000\n4000\n5000\n6000\n7000\n8000\n0\n1000\n2000\n3000\n4000\n5000\n6000\nLayout for SWIM\n(b) Opus Incertum (Brute Force Search)\n0\n2000\n4000\n6000\n8000\n0\n1000\n2000\n3000\n4000\n5000\n6000\nLayout for SWIM\n(c) Opus Incertum (Quantum Approximate Op-\ntimization Algorithm, simulator)\n0\n1000\n2000\n3000\n4000\n5000\n6000\n7000\n0\n1000\n2000\n3000\n4000\n5000\nLayout for SWIM\n(d) Opus Incertum (Quantum Approximate Op-\ntimization Algorithm, quantum computer)\n0\n1000\n2000\n3000\n4000\n5000\n6000\n7000\n0\n1000\n2000\n3000\n4000\n5000\nLayout for SWIM\n(e) Opus Incertum (Quantum Alternating Oper-\nator Ansatz, simulator)\n0\n1000\n2000\n3000\n4000\n5000\n6000\n7000\n0\n1000\n2000\n3000\n4000\n5000\nLayout for SWIM\n(f) Opus Incertum (Quantum Alternating Oper-\nator Ansatz, quantum computer)\nFigure C6: Results obtained for SWIM.\n"
}